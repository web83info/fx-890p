;******************************************************************************
;3D-MAZE                                     1997(C) COPYRIGHT BY ABCP software
;******************************************************************************

	.186
CODE	SEGMENT
	ASSUME	CS:CODE,DS:CODE,SS:CODE,ES:CODE

	ORG	0100H
START:
	ORG	2000H

;**************************************
;初期化
;**************************************

	CLD
	XOR	AX,AX
	MOV	DS,AX
	MOV	ES,AX
	MOV	G_LEVEL,AL		;(AL=0)

;**************************************
;タイトル表示
;**************************************

TITLE:
	MOV	AH,10H
	INT	41H
	MOV	AH,0FH
	MOV	BX,000CH
	INT	41H
	MOV	AH,20H
	MOV	DI,OFFSET _3DMAZE
	INT	41H

	MOV	AH,0FH
	MOV	BX,0209H
	INT	41H
	MOV	AH,20H
	MOV	DI,OFFSET LEVEL
	INT	41H

P_LV:
	MOV	AH,0FH
	MOV	BX,0215H
	INT	41H
	MOV	AH,1
	MOV	DL,G_LEVEL
	ADD	DL,30H
	INT	41H

	MOV	AH,4
	INT	41H
	CMP	DL,34H
	JNZ	LV_1
	CMP	BYTE PTR G_LEVEL,0
	JZ	LV_1
	DEC	BYTE PTR G_LEVEL
LV_1:
	CMP	DL,36H
	JNZ	LV_2
	CMP	BYTE PTR G_LEVEL,9
	JZ	LV_2
	INC	BYTE PTR G_LEVEL
LV_2:
	CMP	DL,13
	JNZ	P_LV

	MOV	AL,G_LEVEL
	SAL	AL,1
	ADD	AL,12
	MOV	BYTE PTR M_SIZE,AL

;**************************************
;迷路作成
;**************************************

	MOV	AH,10H			;CLS
	INT	41H
					;取り合えず壁をおく
	XOR	AX,AX
	MOV	DI,OFFSET MAZE
	MOV	CX,961
	REP	STOSB

	MOV	AL,M_SIZE
	INC	AL
	MOV	BL,0
MK_LP:
	MOV	BH,0
	CALL	XY
	MOV	BYTE PTR [DI],1
	MOV	BH,M_SIZE
	CALL	XY
	MOV	BYTE PTR [DI],1
	INC	BL
	CMP	BL,AL
	JNZ	MK_LP
	MOV	BH,1
MK_LP2:
	MOV	BL,0
	CALL	XY
	MOV	BYTE PTR [DI],1
	MOV	BL,M_SIZE
	CALL	XY
	MOV	BYTE PTR [DI],1
	INC	BH
	CMP	BH,M_SIZE
	JNZ	MK_LP2
					;隙間を埋める
	MOV	BH,2
KABE_1:
	MOV	BL,2
KABE_2:
	CALL	XY
	MOV	BYTE PTR [DI],1
KABE_A:
	CALL	RND
	AND	DL,3
	CMP	BL,2
	JZ	KABE_3
	CMP	DL,3
	JZ	KABE_A
KABE_3:
	SAL	DL,1
	XOR	DH,DH
	MOV	DI,OFFSET KABEDATA
	ADD	DI,DX
	MOV	AX,[DI]
	PUSH	BX
	ADD	BL,AL
	ADD	BH,AH
	CALL	XY
	MOV	BYTE PTR [DI],1
	POP	BX
	ADD	BL,2
	CMP	BL,M_SIZE
	JC	KABE_2
	XOR	CX,CX			;ダブり防止
	CALL	RND
	AND	DL,3
	MOV	CL,DL
LP:	LOOP	LP

	ADD	BH,2
	CMP	BH,M_SIZE
	JC	KABE_1
					;ゴール設定
	MOV	BL,M_SIZE
	CALL	RND
	AND	DL,1
	SAL	DL,1
	INC	DL
	SUB	BL,DL
	MOV	BH,M_SIZE
	CALL	RND
	AND	DL,1
	SAL	DL,1
	INC	DL
	SUB	BH,DL
	CALL	XY
	MOV	BYTE PTR [DI],2

;**************************************
;マップ表示
;**************************************

	MOV	AL,M_SIZE
	INC	AL
					;画面の真ん中に表示
	MOV	CL,192
	SUB	CL,M_SIZE
	SHR	CL,1
	MOV	CH,32
	SUB	CH,M_SIZE
	SHR	CH,1
	MOV	BH,0
SHOW_1:
	MOV	BL,0
SHOW_2:
	CALL	XY
	MOV	DL,[DI]
	CMP	DL,1
	JNZ	SHOW_3
	PUSH	BX
	ADD	BL,CL
	ADD	BH,CH
	CALL	FUNK_7
	POP	BX
SHOW_3:
	INC	BL
	CMP	BL,AL
	JNZ	SHOW_2
	INC	BH
	CMP	BH,AL
	JNZ	SHOW_1

	MOV	AH,4			;キー入力待ち
	INT	41H

;**************************************
;メイン
;**************************************

	MOV	BYTE PTR MY_X,1
	MOV	BYTE PTR MY_Y,1
	MOV	BYTE PTR DRCT,1
	MOV	BYTE PTR G_FLAG,0

MAIN_S:
	MOV	AH,10H
	INT	41H

	MOV	AH,0FH
	MOV	BX,010AH
	INT	41H
	MOV	AH,20H
	MOV	DI,OFFSET NEWS
	INT	41H

	MOV	AH,0FH
	MOV	BX,0115H
	INT	41H
	MOV	AH,1
	MOV	BL,DRCT
	XOR	BH,BH
	MOV	DL,[BX+NEWS_O]
	INT	41H

	XOR	BX,BX			;外枠
	MOV	CX,1F27H
	CALL	FUNK_9

	MOV	DL,DRCT
	SAL	DL,2
	XOR	DH,DH
	MOV	DI,OFFSET VECTOR
	ADD	DI,DX
	MOV	[VECTOR_O],DI

	MOV	AX,[DI]
	MOV	BL,BYTE PTR MY_X
	MOV	BH,BYTE PTR MY_Y
	ADD	BL,AL
	ADD	BH,AH
	CALL	XY
	MOV	AL,2
	CMP	BYTE PTR [DI],1
	JZ	LINE_1
	XOR	AL,AL
LINE_1:
	MOV	BX,0326H
	SUB	BH,AL
	MOV	CX,0323H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1C23H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1C26H
	ADD	CH,AL
	CALL	FUNK_8

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI]
	MOV	BL,BYTE PTR MY_X
	MOV	BH,BYTE PTR MY_Y
	SUB	BL,AL
	SUB	BH,AH
	CALL	XY
	MOV	AL,2
	CMP	BYTE PTR [DI],1
	JZ	LINE_2
	XOR	AL,AL
LINE_2:
	MOV	BX,301H
	SUB	BH,AL
	MOV	CX,304H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1C04H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1C01H
	ADD	CH,AL
	CALL	FUNK_8

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI+2]
	MOV	BL,BYTE PTR MY_X
	MOV	BH,BYTE PTR MY_Y
	ADD	BL,AL
	ADD	BH,AH
	MOV	BYTE PTR MY_XX,BL
	MOV	BYTE PTR MY_YY,BH
	CALL	XY
	MOV	AL,[DI]
	CMP	AL,1
	JNZ	LINE_3
	MOV	BX,304H
	MOV	CX,1C23H
	CALL	FUNK_9
	JMP	KEY_IN
LINE_3:
	CMP	AL,2
	JNZ	LINE_4
	MOV	BX,1C0FH
	MOV	CX,1C18H
	CALL	FUNK_8
	MOV	BYTE PTR G_FLAG,1
LINE_4:

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI]
	MOV	BL,BYTE PTR MY_XX
	MOV	BH,BYTE PTR MY_YY
	ADD	BL,AL
	ADD	BH,AH
	CALL	XY
	MOV	AL,6
	CMP	BYTE PTR [DI],1
	JZ	LINE_5
	XOR	AL,AL
LINE_5:
	MOV	BX,0923H
	SUB	BH,AL
	MOV	CX,091BH
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,161BH
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1623H
	ADD	CH,AL
	CALL	FUNK_8

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI]
	MOV	BL,BYTE PTR MY_XX
	MOV	BH,BYTE PTR MY_YY
	SUB	BL,AL
	SUB	BH,AH
	CALL	XY
	MOV	AL,6
	CMP	BYTE PTR [DI],1
	JZ	LINE_6
	XOR	AL,AL
LINE_6:
	MOV	BX,0904H
	SUB	BH,AL
	MOV	CX,090CH
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,160CH
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1604H
	ADD	CH,AL
	CALL	FUNK_8

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI+2]
	MOV	BL,BYTE PTR MY_XX
	MOV	BH,BYTE PTR MY_YY
	ADD	BL,AL
	ADD	BH,AH
	MOV	BYTE PTR MY_XX,BL
	MOV	BYTE PTR MY_YY,BH
	CALL	XY
	MOV	AL,[DI]
	CMP	AL,1
	JNZ	LINE_7
	MOV	BX,090CH
	MOV	CX,161BH
	CALL	FUNK_9
	JMP	KEY_IN
LINE_7:
	CMP	AL,2
	JNZ	LINE_8
	MOV	BX,1612H
	MOV	CX,1615H
	CALL	FUNK_8
LINE_8:

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI]
	MOV	BL,BYTE PTR MY_XX
	MOV	BH,BYTE PTR MY_YY
	ADD	BL,AL
	ADD	BH,AH
	CALL	XY
	MOV	AL,4
	CMP	BYTE PTR [DI],1
	JZ	LINE_9
	XOR	AL,AL
LINE_9:
	MOV	BX,0D1BH
	SUB	BH,AL
	MOV	CX,0D16H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1216H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,121BH
	ADD	CH,AL
	CALL	FUNK_8

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI]
	MOV	BL,BYTE PTR MY_XX
	MOV	BH,BYTE PTR MY_YY
	SUB	BL,AL
	SUB	BH,AH
	CALL	XY
	MOV	AL,4
	CMP	BYTE PTR [DI],1
	JZ	LINE_10
	XOR	AL,AL
LINE_10:
	MOV	BX,0D0CH
	SUB	BH,AL
	MOV	CX,0D11H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,1211H
	CALL	FUNK_8
	MOV	BX,CX
	MOV	CX,120CH
	ADD	CH,AL
	CALL	FUNK_8

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI+2]
	MOV	BL,BYTE PTR MY_XX
	MOV	BH,BYTE PTR MY_YY
	ADD	BL,AL
	ADD	BH,AH
	CALL	XY
	MOV	AL,[DI]
	CMP	AL,1
	JNZ	LINE_11
	MOV	BX,0D11H
	MOV	CX,1216H
	CALL	FUNK_9
	JMP	KEY_IN
LINE_11:
	CMP	AL,2
	JNZ	LINE_12
	MOV	BX,1213H
	MOV	CX,1214H
	CALL	FUNK_8
LINE_12:

KEY_IN:
	CMP	BYTE PTR G_FLAG,1
	JNZ	KEY_P
	JMP	GOAL
KEY_P:
	MOV	AH,1FH
	INT	41H
	MOV	AH,1DH
	INT	41H
	CMP	DL,32H
	JNZ	KEY_1

	MOV	BL,BYTE PTR MY_X
	MOV	BH,BYTE PTR MY_Y
	MOV	DI,[VECTOR_O]
	MOV	AX,[DI+2]
	SUB	BL,AL
	SUB	BH,AH
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNZ	KEY_1
	MOV	BYTE PTR MY_X,BL
	MOV	BYTE PTR MY_Y,BH
	JMP	MAIN_S

KEY_1:
	CMP	DL,34H
	JNZ	KEY_2
	MOV	AL,DRCT
	DEC	AL
	JNS	DRCT_2
	MOV	AL,3
DRCT_2:
	MOV	DRCT,AL
	JMP	MAIN_S
KEY_2:
	CMP	DL,36H
	JNZ	KEY_3
	MOV	AL,DRCT
	INC	AL
	CMP	AL,4
	JNZ	DRCT_3
	MOV	AL,0
DRCT_3:
	MOV	DRCT,AL
	JMP	MAIN_S
KEY_3:
	CMP	DL,38H
	JNZ	KEY_4

	MOV	BL,BYTE PTR MY_X
	MOV	BH,BYTE PTR MY_Y

	MOV	DI,[VECTOR_O]
	MOV	AX,[DI+2]
	ADD	BL,AL
	ADD	BH,AH
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNZ	KEY_4
	MOV	BYTE PTR MY_X,BL
	MOV	BYTE PTR MY_Y,BH
	JMP	MAIN_S
KEY_4:
	JMP	KEY_P
GOAL:
	MOV	AX,0080H
	CALL	KEY
	AND	AH,02H
	JZ	GOAL
GOAL2:
	MOV	AX,0080H
	CALL	KEY
	AND	AH,02H
	JNZ	GOAL2

	JMP	TITLE

;**************************************
;サブルーチン
;**************************************

KEY:
	MOV	DX,200H
	OUT	DX,AX
	CALL	K_WAIT
	MOV	DX,202H
	IN	AX,DX
	RET
K_WAIT:
	PUSH	CX
	MOV	CX,0009H
K_LOOP:
	LOOP	K_LOOP
	POP	CX
	RET

FUNK_7:
	PUSHA
	PUSH	ES
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
	CALL	LCDC_Z
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AH,ES:[DI]
	MOV	AL,20H
	SHR	AL,CL
	PUSH	BX
	POP	BX
	PUSH	BX
	POP	BX
	MOV	AH,ES:[DI]
	OR	AH,AL
	DEC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AL,AH
	STOSB
	POP	ES
	POPA
	RET

FUNK_8:
	PUSHA
	MOV	AH,CL
	SUB	AH,BL
	CMP	BL,CL
	JC	X_LEN
	MOV	AH,BL
	SUB	AH,CL
X_LEN:
	INC	AH
	MOV	AL,CH
	SUB	AL,BH
	CMP	BH,CH
	JC	Y_LEN
	MOV	AL,BH
	SUB	AL,CH
Y_LEN:
	INC	AL
	CMP	AH,AL
	JNA	Y_LONG
X_LONG:
	CMP	BL,CL
	JC	X_LONG_1
	XCHG	BX,CX
X_LONG_1:
	MOV	DH,AL
	CALL	WARI
	XCHG	AL,AH
	MOV	DI,AX
	AND	DI,00FFH
	XCHG	AL,AH
	MOV	AH,DH
	SHR	AH,1
X_LONG_L:
	PUSH	CX
	MOV	CX,BX
	ADD	CX,DI
	DEC	CL
	SUB	AH,AL
	JNC	NANAME_2
	INC	CL
	ADD	AH,DH
NANAME_2:
	CALL	YOKO
	MOV	BL,CL
	INC	BL
	POP	CX
	CMP	BH,CH
	JE	NANAME_E
	DEC	BH
	JNC	X_ADD
	ADD	BH,2
X_ADD:
	JMP	X_LONG_L
Y_LONG:
	CMP	BH,CH
	JC	Y_LONG_1
	XCHG	BX,CX
Y_LONG_1:
	XCHG	AH,AL
	MOV	DH,AL
	CALL	WARI
	MOV	DI,AX
	AND	DI,0FF00H
	MOV	AH,DH
	SHR	AH,1
Y_LONG_L:
	PUSH	CX
	MOV	CX,BX
	ADD	CX,DI
	DEC	CH
	SUB	AH,AL
	JNC	NANAME_3
	INC	CH
	ADD	AH,DH
NANAME_3:
	CALL	TATE
	MOV	BH,CH
	INC	BH
	POP	CX
	CMP	BL,CL
	JE	NANAME_E
	DEC	BL
	JNC	Y_ADD
	ADD	BL,2
Y_ADD:
	JMP	Y_LONG_L
NANAME_E:
	POPA
	RET

FUNK_9:
	PUSH	BX
	PUSH	CX
	CMP	BL,CL
	JE	FUNK_9_E
	JC	FUNK_9_1
	XCHG	BL,CL
FUNK_9_1:
	CMP	BH,CH
	JE	FUNK_9_E
	JC	FUNK_9_2
	XCHG	BH,CH
FUNK_9_2:
	INC	BH
	DEC	CH
	CMP	BH,CH
	JA	FUNK_9_3
	CALL	TATE
	XCHG	BL,CL
	CALL	TATE
	XCHG	BL,CL
FUNK_9_3:
	DEC	BH
	INC	CH
BOX_FS:
	CALL	YOKO
	CMP	BH,CH
	JE	FUNK_9_E
	MOV	BH,CH
	JMP	BOX_FS
FUNK_9_E:
	POP	CX
	POP	BX
	RET

TATE:
	PUSH	BX
TATE_1:
	CALL	FUNK_7
	CMP	BH,CH
	JE	TATE_E
	INC	BH
	JMP	TATE_1
TATE_E:
	POP	BX
	RET

YOKO:
	PUSHA
	PUSH	ES
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
BOX_LP:
	PUSH	BX
	PUSH	CX
LINE_FS:
	MOV	DH,03FH
	MOV	AH,BL
	MOV	AL,6
	CALL	WARI
	NEG	AH
	MOV	CH,AH
	PUSH	CX
	MOV	CL,AL
	SHR	DH,CL
	POP	CX
	MOV	AH,CL
	MOV	AL,6
	CALL	WARI
	MOV	CL,AL
	ADD	CH,AH
	AND	CH,CH
	JNZ	LINE_RD
	INC	CH
	JMP	LINE_RT2
LINE_MD:
	MOV	DH,03FH
LINE_LP:
	SUB	CH,1
	JNC	LINE_RD
	JMP	LINE_END
LINE_RD:
	PUSH	BX
	PUSH	CX
	CALL	LCDC_Z
	POP	CX
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AH,ES:[DI]
	PUSH	BX
	POP	BX
	PUSH	BX
	POP	BX
	MOV	AH,ES:[DI]
	OR	DH,AH
	DEC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AL,DH
	STOSB
	POP	BX
	ADD	BL,6
	CMP	CH,1
	JNE	LINE_MD
LINE_RT:
	MOV	DH,03FH
LINE_RT2:
	NEG	CL
	ADD	CL,5
	SHR	DH,CL
	SHL	DH,CL
	JMP	LINE_LP
LINE_END:
	POP	CX
	POP	BX

LINE_RET:
	POP	ES
	POPA
	RET


WARI:					;AH/AL=AH...AL
	PUSH	BX
	PUSH	CX
	XOR	BX,BX
	MOV	BL,AH
	MOV	CX,8
WARI_L:
	SAL	BX,1
	MOV	AH,BH
	SUB	AH,AL
	JC	WARI_S
	INC	BL
	MOV	BH,AH
WARI_S:
	LOOP	WARI_L
	MOV	AH,BL
	MOV	AL,BH
	POP	CX
	POP	BX
	RET

LCDC_Z:
	CMP	BL,96
	JC	LCDC_Z_1
	ADD	BH,32
LCDC_Z_1:
	MOV	AH,BL
	MOV	AL,6
	CALL	WARI
	MOV	CL,AL
	AND	AH,0FH
	ADD	AH,6
	MOV	BL,AH
	RET

XY:
	PUSH	AX
	PUSH	BX
	MOV	DI,OFFSET MAZE
	MOV	AL,BH
	MOV	AH,M_SIZE
	INC	AH
	MUL	AH
	XOR	BH,BH
	ADD	AX,BX
	ADD	DI,AX
	POP	BX
	POP	AX
	RET

RND:
	PUSH	AX
	PUSH	BX
	PUSH	CX
	DB	0B9H			;CX=?
RNDDT:
	DW	12DBH
	MOV	BH,CH
	MOV	BL,CL
	SAL	BX,1
	ADD	CX,BX
	MOV	DL,CL
	ADD	DL,CH
	MOV	CH,DL
	ADD	CX,0038H
	MOV	WORD PTR RNDDT,CX
	MOV	DL,CH
	POP	CX
	POP	BX
	POP	AX
	RET

;**************************************
;データ、ワークエリア
;**************************************

_3DMAZE		DB	'3D-MAZE',0
LEVEL		DB	'GAME LEVEL:[ ]',0
NEWS		DB	'Direction:[ ]',0
NEWS_O		DB	'NESW'
KABEDATA	DB	0,1,0,-1,1,0,-1,0
VECTOR		DB	1,0,0,-1
		DB	0,1,1,0
		DB	-1,0,0,1
		DB	0,-1,-1,0

M_SIZE		DB	1 DUP(?)
MAZE		DB	961 DUP(?)
G_LEVEL		DB	1 DUP(?)
VECTOR_O	DW	1 DUP(?)
MY_X		DB	1 DUP(?)
MY_Y		DB	1 DUP(?)
MY_XX		DB	1 DUP(?)
MY_YY		DB	1 DUP(?)
DRCT		DB	1 DUP(?)
G_FLAG		DB	1 DUP(?)

CODE	ENDS
	END	START
