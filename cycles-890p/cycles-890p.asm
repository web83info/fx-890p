;******************************************************************************
;CYCLES 890P by ABCP software. Ver.1.12b
;1997 (C) COPYRIGHT BY ABCP software
;******************************************************************************

	.186
CODE	SEGMENT
	ASSUME	CS:CODE,DS:CODE,SS:CODE,ES:CODE

	ORG	0100H
START:
	ORG	2000H

;**************************************
;タイトル表示
;**************************************

TITLE:
	XOR	DI,DI
	MOV	DS,DI
	MOV	AH,10H
	INT	41H
BDISP1:
	MOV	SI,OFFSET TITLE_GRAPH
BDISP:
	MOV	AX,0A000H
	MOV	ES,AX
	MOV	AL,23H
	STOSB
	MOV	AL,35H
	STOSB
	MOV	DL,4
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,3
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CX,18
BDILP0:
	LODSB
	SHR	AL,4
	STOSB
	INC	DI
	LOOP	BDILP0
BDILP1:
	INC	DL
	INC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,3
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CL,18
BDILP2:
	MOV	AH,[SI-18]
	LODSB
	SHR	AX,4
	STOSB
	INC	DI
	LOOP	BDILP2
	CMP	DL,16
	JNZ	BDILP1
	SUB	SI,18
	MOV	DL,3
BDILP3:
	INC	DL
	INC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,35
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CL,18
BDILP4:
	MOV	AH,[SI-18]
	LODSB
	SHR	AX,4
	STOSB
	INC	DI
	LOOP	BDILP4
	CMP	DL,16
	JNZ	BDILP3
	INC	DI
	MOV	AL,23H
	STOSB
	MOV	AL,75H
	STOSB
	MOV	AL,20H
	STOSB
	MOV	ES,CX

	MOV	BX,0309H
	MOV	DI,OFFSET MOJI_PUSH_SPACE_KEY
	CALL	MOJI_PRINT
TITLE_BREAK_CHK:
	CALL	POWEROFF_CHECK
	MOV	AX,0010H
	CALL	KEY
	AND	AL,80H
	JZ	TITLE_BREAK_CHK

;**************************************
;ゲーム前の初期設定
;**************************************

INIT:
	MOV	AH,10H
	INT	41H
	MOV	CX,80
	XOR	AX,AX
	MOV	ES,AX
	MOV	DI,OFFSET BRAM
	REP	STOSB
	MOV	BYTE PTR KEY_REPEAT_2,AL
	MOV	BYTE PTR KEY_REPEAT_3,AL
	MOV	BYTE PTR UNTIL_PRIMER,51
	MOV	WORD PTR SCORE1,AX
	MOV	WORD PTR SCORE2,AX

	MOV	DL,12
	XOR	BH,BH
WALL_Y_LOOP:
	MOV	BL,-2
WALL_X_LOOP:
	CALL	PRINT
	INC	BL
	OR	BL,BL
	JNZ	WALL_X_LOOP
WALL_Y_INC:
	INC	BH
	CMP	BH,2
	JZ	WALL_Y_INC
	CMP	BH,5
	JNZ	WALL_Y_LOOP

	MOV	BX,16
WALL_BOTTOM_LOOP:
	CALL	PRINT
	INC	BH
	CMP	BH,5
	JNZ	WALL_BOTTOM_LOOP
	MOV	BX,0114H
	MOV	DI,OFFSET MOJI_SCORE
	CALL	MOJI_PRINT
	XOR	AX,AX
	XOR	DX,DX
	CALL	SCORE_PRINT
	CALL	NEXT

;**************************************
;メインルーチン
;**************************************

SET:
	MOV	BYTE PTR ARROW_X,0
	MOV	BYTE PTR ARROW_Y,2
	CALL	NEXT
	MOV	BYTE PTR KEY_REPEAT,0
DOWN_CONT:
	CALL	ARROW_PRINT

	MOV	AX,100			;スコアによって落下速度を変化
	MOV	DX,SCORE1
	CMP	DX,0
	JNZ	FASTEST
	MOV	AX,SCORE2
	MOV	CX,50
	DIV	CX
	CMP	AX,200
	JC	SLOW
	MOV	AX,200
SLOW:
	NEG	AX
	ADD	AX,300
FASTEST:
	MOV	WORD PTR DOWN_WAIT,AX

DOWN_LOOP:
	CALL	RND
	CALL	POWEROFF_CHECK
	CALL	PAUSE_CHECK
	CALL	CHK			;Yの変化量を返す
	CMP	BYTE PTR DELTA_Y,0	;DELTA_Y=Yの変化量
	JZ	RE_CHR_PUT
	CALL	ARROW_DISPRINT
RE_CHR_PUT:
	MOV	BH,ARROW_Y
	ADD	BH,BYTE PTR DELTA_Y
	MOV	BYTE PTR ARROW_Y,BH
	CALL	ARROW_PRINT
DOWN_LOOP_END:
	SUB	WORD PTR DOWN_WAIT,1
	JNC	DOWN_LOOP
	CALL	ARROW_DISPRINT

	CMP	BYTE PTR ARROW_X,15
	JZ	BOTTOM
	MOV	BL,ARROW_X
	MOV	BH,ARROW_Y
	CALL	XY
	CMP	BYTE PTR [DI+1],0
	JNZ	BOTTOM

	INC	BYTE PTR ARROW_X
	CMP	BYTE PTR ARROW_X,1
	JC	TO_DOWN_CONT
	MOV	BL,-1
	MOV	BH,2
	MOV	DL,NEXT_ARROW_DERECTION
	CALL	PRINT
	DEC	BL
	MOV	DL,NEXT_ARROW_DERECTION2
	CALL	PRINT
TO_DOWN_CONT:
	JMP	DOWN_CONT

BOTTOM:					;これ以上落ちられないとき
	CALL	ARROW_PRINT
	MOV	BL,ARROW_X
	MOV	BH,ARROW_Y
	CALL	XY
	MOV	AL,ARROW_DERECTION
	MOV	[DI],AL
	OR	BL,BL
	JZ	BOTTOM_2
	MOV	AH,ARROW_DERECTION2
	MOV	[DI-1],AH
BOTTOM_2:
	CMP	AL,11
	JNZ	VANISHING

;**************************************
;プライマーの処理
;**************************************

PRIMER:
	MOV	BL,ARROW_X
	MOV	BH,ARROW_Y
	CALL	XY
	MOV	BYTE PTR [DI],2
PRIMER_LOOP:
	MOV	DL,5
PRIMER_ANIME_LOOP:
	CALL	PRINT
	MOV	CX,02000H
	LOOP	$
	INC	DL
	CMP	DL,11
	JNZ	PRIMER_ANIME_LOOP
	CALL	XY
	MOV	AL,[DI]
	MOV	BYTE PTR [DI],0
	OR	AL,AL
	JNZ	PRIMER_MOVE
	MOV	AL,DH
PRIMER_MOVE:
	MOV	DH,AL
	XOR	AH,AH
	MOV	DI,AX
	MOV	CL,[OFFSET VECTOR_X+DI]
	MOV	CH,[OFFSET VECTOR_Y+DI]
	ADD	BL,CL			;座標の変化
	ADD	BH,CH
	CMP	BL,0
	JC	PRIMER_E
	CMP	BL,15
	JA	PRIMER_E
	CMP	BH,0
	JC	PRIMER_E
	CMP	BH,4
	JNA	PRIMER_LOOP
PRIMER_E:
	CALL	GRAVITY			;ブロックの落下
VANISHING:
	CALL	VANISH
OVER_CHECK:
	XOR	CX,CX
	LOOP	$
	MOV	BX,0200H
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNZ	END
	JMP	SET

;**************************************
;ゲームオーバー
;**************************************

END:
	MOV	DL,5
END_LOOP:
	XOR	BH,BH
CLS_Y:
	XOR	BL,BL
CLS_X:
	CALL	PRINT
	INC	DI
	INC	BL
	CMP	BL,16
	JNZ	CLS_X
	INC	BH
	CMP	BH,5
	JNZ	CLS_Y
	MOV	CX,0800H
	LOOP	$
	INC	DL
	CMP	DL,11
	JNZ	END_LOOP

	MOV	BX,0105H
	MOV	DI,OFFSET MOJI_GAMEOVER
	CALL	MOJI_PRINT
END_CR_WAIT:
	CALL	POWEROFF_CHECK
	MOV	AX,0080H
	CALL	KEY
	AND	AH,02H
	JZ	END_CR_WAIT
	JMP	INIT

;**************************************
;消去判定
;**************************************

VANISH:
	MOV	WORD PTR RENSA_NUMBER,1
VANISH_START:
	XOR	AX,AX
	MOV	ES,AX
	MOV	DS,AX
	MOV	DI,OFFSET VANISH_BLOCK
	MOV	CX,80
	REP	STOSB
VANISH_1:
	MOV	BYTE PTR [VANISH_THIS_TIME],0
	MOV	WORD PTR VANISH_NUMBER,0
	XOR	BH,BH
VANISH_Y_LOOP:
	XOR	BL,BL
VANISH_X_LOOP:
	PUSH	BX
	MOV	DI,OFFSET VANISH_CHECK_WORK
	MOV	CX,80
	REP	STOSB
	CALL	XY
	SUB	DI,OFFSET BRAM
	ADD	DI,OFFSET VANISH_CHECK_WORK
	MOV	BYTE PTR [DI],-1	;輪の最初にフラグ
VANISH_MAIN_LOOP:
	CALL	XY
	MOV	CL,[DI]
	XOR	CH,CH
	MOV	DI,CX
	MOV	CL,[OFFSET VECTOR_X+DI]
	MOV	CH,[OFFSET VECTOR_Y+DI]
	ADD	BL,CL
	ADD	BH,CH
	CMP	BL,0
	JC	VANISH_E
	CMP	BL,15
	JA	VANISH_E
	CMP	BH,0
	JC	VANISH_E
	CMP	BH,4
	JA	VANISH_E
	CALL	XY			;そのマスが空っぽか
	CMP	BYTE PTR [DI],0
	JZ	VANISH_E
	SUB	DI,OFFSET BRAM		;一回通ったところならダメ
	ADD	DI,OFFSET VANISH_CHECK_WORK
	CMP	BYTE PTR [DI],1
	JZ	VANISH_E
	CMP	BYTE PTR [DI],-1
	MOV	BYTE PTR [DI],1		;「通った」というフラグを立てる
	JNZ	VANISH_MAIN_LOOP
	MOV	SI,OFFSET VANISH_BLOCK
	MOV	DI,OFFSET VANISH_CHECK_WORK
	MOV	CX,80
TRANS_LOOP:
	MOV	AL,[DI]
	OR	AL,AL
	JZ	TRANS_SCORE
	INC	WORD PTR VANISH_NUMBER	;VANISH_NUMBER=消したブロック数の2乗
TRANS_SCORE:
	OR	[SI],AL
	INC	SI
	INC	DI
	LOOP	TRANS_LOOP
	MOV	BYTE PTR [VANISH_THIS_TIME],1
VANISH_E:
	POP	BX
	INC	BL
	CMP	BL,16
	JZ	$+5
	JMP	VANISH_X_LOOP
	INC	BH
	CMP	BH,5
	JZ	$+5
	JMP	VANISH_Y_LOOP
	CMP	BYTE PTR [VANISH_THIS_TIME],1
	JZ	$+5
	JMP	VANISH_NO_ANIME
	MOV	BX,0218H
	MOV	DL,'+'
	CALL	LCDC

	MOV	AX,RENSA_NUMBER
	MUL	WORD PTR RENSA_NUMBER
	MUL	WORD PTR RENSA_NUMBER
	MUL	WORD PTR VANISH_NUMBER
	MOV	WORD PTR SCORE_PLUS1,DX
	MOV	WORD PTR SCORE_PLUS2,AX
	MOV	CX,10000
	DIV	CX
	CALL	SCORE_PRINT
	MOV	DX,WORD PTR SCORE_PLUS1
	MOV	AX,WORD PTR SCORE_PLUS2
	ADD	SCORE2,AX
	ADC	SCORE1,DX
	MOV	CX,10000
	DIV	CX
	CMP	AX,1000
	JC	NOT_OVERFLOW
	MOV	DX,0098H
	MOV	AX,967FH
	MOV	SCORE1,DX
	MOV	SCORE2,AX
NOT_OVERFLOW:
	MOV	DL,5
ANIME_CHR_LOOP:
	XOR	BH,BH
ANIME_Y_LOOP:
	XOR	BL,BL
ANIME_X_LOOP:
	CALL	XY
	MOV	SI,DI
	SUB	DI,OFFSET BRAM
	ADD	DI,OFFSET VANISH_BLOCK
	CMP	BYTE PTR [DI],0
	JZ	ANIME_LOOP_END
	CALL	PRINT
	MOV	BYTE PTR [SI],0		;BRAMから消す。
ANIME_LOOP_END:
	INC	BL
	CMP	BL,16
	JNZ	ANIME_X_LOOP
	INC	BH
	CMP	BH,5
	JNZ	ANIME_Y_LOOP
	MOV	CX,03000H
	LOOP	$
	INC	DL
	CMP	DL,11
	JNZ	ANIME_CHR_LOOP
	CALL	GRAVITY
	INC	WORD PTR RENSA_NUMBER
	JMP	VANISH_START
VANISH_NO_ANIME:
	MOV	BX,0218H
	MOV	DL,' '
	CALL	LCDC
	MOV	DX,SCORE1
	MOV	AX,SCORE2
	MOV	CX,10000
	DIV	CX
	CALL	SCORE_PRINT
	RET

;**************************************
;重力が働きます
;**************************************

GRAVITY:
	XOR	BH,BH
GRAVITY_Y_LOOP:
	MOV	BL,1
GRAVITY_X_LOOP:
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNZ	GRAVITY_LOOP_END
	MOV	CL,BL
	XOR	CH,CH
GRAVITY_DOWN_LOOP:
	MOV	AL,[DI-1]
	MOV	[DI],AL
	DEC	DI
	LOOP	GRAVITY_DOWN_LOOP
	MOV	[DI],CL			;先頭を0にする。
GRAVITY_LOOP_END:
	INC	BL
	CMP	BL,16
	JNZ	GRAVITY_X_LOOP
	INC	BH
	CMP	BH,5
	JNZ	GRAVITY_Y_LOOP
	CALL	BRAM_PUT
	RET

;**************************************
;画面表示のサブルーチン
;**************************************

BRAM_PUT:
	MOV	DI,OFFSET BRAM
	XOR	BH,BH
BRAM_PUT_Y:
	XOR	BL,BL
BRAM_PUT_X:
	MOV	DL,[DI]
	CALL	PRINT
	INC	DI
	INC	BL
	CMP	BL,16
	JNZ	BRAM_PUT_X
	INC	BH
	CMP	BH,5
	JNZ	BRAM_PUT_Y
	RET

;**************************************
;スコア表示
;**************************************

SCORE_PRINT:
	MOV	BL,25
	MOV	BH,2
	PUSH	DX
	MOV	CL,100
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	AL,AH
	XOR	AH,AH
	MOV	CL,10
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	DL,AH
	CALL	SCORE_NUMBER
	POP	DX

	MOV	AX,DX
	XOR	DX,DX
	MOV	CX,1000
	DIV	CX
	XCHG	AX,DX
	CALL	SCORE_NUMBER
	MOV	CL,100
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	AL,AH
	XOR	AH,AH
	MOV	CL,10
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	DL,AH
	CALL	SCORE_NUMBER
	RET

SCORE_NUMBER:
	ADD	DL,48
	CALL	LCDC
	INC	BL
	RET

;**************************************
;NEXT表示ルーチン
;**************************************

NEXT:
	MOV	AL,NEXT_ARROW_DERECTION
	MOV	ARROW_DERECTION,AL
	MOV	AL,NEXT_ARROW_DERECTION2
	MOV	ARROW_DERECTION2,AL
	CALL	RND
	MOV	DH,DL
	CALL	RND
	AND	DX,0303H
	ADD	DX,0101H
	MOV	BYTE PTR NEXT_ARROW_DERECTION,DL
	MOV	BYTE PTR NEXT_ARROW_DERECTION2,DH
	DEC	BYTE PTR UNTIL_PRIMER
	JNZ	NEXT_RET
	MOV	BYTE PTR UNTIL_PRIMER,50
	MOV	BYTE PTR NEXT_ARROW_DERECTION,11
	MOV	BYTE PTR NEXT_ARROW_DERECTION2,0
NEXT_RET:
	MOV	BL,-2
	MOV	BH,2
	MOV	DL,0
	CALL	PRINT
	INC	BL
	CALL	PRINT
	RET

;**************************************
;乱数発生
;**************************************

RND:
	PUSH	AX
	PUSH	BX
	PUSH	CX
RNDDT:
	MOV	AX,02DBH
	MOV	BX,0383H
	XOR	CX,CX
	MOV	DL,10
RNDLP:
	ADD	CX,CX
	SAL	AH,1
	RCL	AL,1
	JC	RNDSK
	ADD	CX,BX
RNDSK:
	SUB	DL,1
	JNZ	RNDLP
	XCHG	BX,CX
	MOV	WORD PTR [RNDDT+1],BX
	MOV	DL,BH
	POP	CX
	POP	BX
	POP	AX
	RET

;**************************************
;１文字表示
;**************************************

PRINT:
	PUSHA
	PUSH	ES
	PUSH	DS
	ADD	BL,2
	XOR	DI,DI
	MOV	DS,DI
	MOV	AX,0A000H
	MOV	ES,AX
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	AND	AL,0FH
	ADD	AL,6
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	SAL	BH,1
	SAL 	AL,2
	ADD	AL,BH
	SAL	BL,1
	AND	BL,20H
	ADD	AL,BL
	INC	AL
	STOSB
	XOR	DH,DH
	SAL	DX,1
	MOV	CX,DX
	SAL	DX,1
	ADD	DX,CX
	ADD	DX,OFFSET ARROW_FONT
	MOV	SI,DX
	MOV	CX,6
WRITE_S:
	MOV	AL,20H
	STOSB
WRITE_L:
	LODSB
	PUSH	BX
	POP	BX
	STOSB
	DEC	DI
	LOOP	WRITE_L
	POP	DS
	POP	ES
	POPA
	RET

LCDC:
	PUSHA
	PUSH	ES
	PUSH	DS
	XOR	AX,AX
	MOV	DS,AX
	MOV	AH,3AH
	INT	41H
	MOV	AX,ES
	MOV	DS,AX
	MOV	SI,DI
	SUB	DL,32
	XOR	DH,DH
	SHL	DX,3
	ADD	SI,DX
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	AND	AL,0FH
	ADD	AL,6
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	SHL	AL,3
	TEST	BL,10H
	JE	OK
	ADD	AL,20H
OK:
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CX,7
P_LP:
	LODSB
	PUSH	BX
	POP	BX
	STOSB
	DEC	DI
	LOOP	P_LP
	POP	DS
	POP	ES
	POPA
	RET

;**************************************
;仮想配列変数
;**************************************

XY:
	PUSH	AX
	PUSH	BX
	SHL	BH,4
	ADD	BL,BH
	XOR	BH,BH
	MOV	DI,BX
	MOV	AX,OFFSET BRAM
	ADD	DI,AX
	POP	BX
	POP	AX
	RET

;**************************************
;文字列表示
;**************************************

MOJI_PRINT:
	PUSHA
MOJI_PRINT_LOOP:
	MOV	DL,[DI]
	INC	DI
	OR	DL,DL
	JZ	MOJI_PRINT_END
	CALL	LCDC
	INC	BL
	JMP	SHORT MOJI_PRINT_LOOP
MOJI_PRINT_END:
	POPA
	RET

;**************************************
;キー入力チェック
;**************************************

CHK:
	MOV	CL,BYTE PTR KEY_REPEAT
	MOV	BYTE PTR DELTA_Y,0
	MOV	AX,0100H		;8
	CALL	KEY
	AND	AX,0010H
	JZ	CHK_A
	INC	BYTE PTR KEY_REPEAT
	CMP	BYTE PTR KEY_REPEAT,50
	JC	CHK_A
	MOV	BYTE PTR KEY_REPEAT,0
	CMP	BYTE PTR ARROW_Y,0
	JE	CHK_A
	MOV	BL,ARROW_X
	MOV	BH,ARROW_Y
	DEC	BH
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNE	CHK_A
	MOV	BYTE PTR DELTA_Y,255
CHK_A:
	MOV	AX,0100H
	CALL	KEY
	AND	AX,0040H
	JZ	CHK_B
	INC	BYTE PTR KEY_REPEAT
	CMP	BYTE PTR KEY_REPEAT,50
	JC	CHK_B
	MOV	BYTE PTR KEY_REPEAT,0
	CMP	BYTE PTR ARROW_Y,4
	JE	CHK_B
	MOV	BL,ARROW_X
	MOV	BH,ARROW_Y
	INC	BH
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNE	CHK_B
	MOV	BYTE PTR DELTA_Y,1
CHK_B:
	MOV	AX,0200H
	CALL	KEY
	AND	AX,0040H
	JZ	CHK_C
	INC	BYTE PTR KEY_REPEAT
	CMP	BYTE PTR KEY_REPEAT,20
	JC	CHK_C
	MOV	BYTE PTR KEY_REPEAT,0
	MOV	WORD PTR DOWN_WAIT,0
CHK_C:
	CMP	CL,BYTE PTR KEY_REPEAT
	JNZ	CHK_D
	MOV	BYTE PTR KEY_REPEAT,0
CHK_D:
	MOV	AX,0002H		;A
	CALL	KEY
	AND	AX,0010H
	JZ	CHK_E
	CMP	BYTE PTR KEY_REPEAT_2,0
	JNZ	CHK_F
	MOV	BYTE PTR KEY_REPEAT_2,1
	MOV	AL,BYTE PTR ARROW_DERECTION
	XCHG	AL,BYTE PTR ARROW_DERECTION2
	MOV	BYTE PTR ARROW_DERECTION,AL
	JMP	CHK_F
CHK_E:
	MOV	BYTE PTR KEY_REPEAT_2,0
CHK_F:
	MOV	AX,0004H		;S
	CALL	KEY
	AND	AX,0008H
	JZ	CHK_G
	CMP	BYTE PTR KEY_REPEAT_3,0
	JNZ	CHK_H
	MOV	BYTE PTR KEY_REPEAT_3,1
	CMP	BYTE PTR ARROW_DERECTION,11
	JZ	CHK_H
	MOV	AL,ARROW_DERECTION
	MOV	AH,ARROW_DERECTION2
	AND	AX,0303H
	ADD	AX,0101H
	MOV	ARROW_DERECTION,AL
	MOV	ARROW_DERECTION2,AH
	JMP	CHK_H
CHK_G:
	MOV	BYTE PTR KEY_REPEAT_3,0
CHK_H:
	RET

;**************************************
;キー入力のサブルーチン
;**************************************

POWEROFF_CHECK:
	MOV	AX,0001H
	CALL	KEY
	XOR	AL,AH
	TEST	AL,41H
	JZ	NOT_POWEROFF
	MOV	AH,7FH
	INT	41H
NOT_POWEROFF:
	RET

PAUSE_CHECK:
	MOV	AX,0040H		;P
	CALL	KEY
	AND	AL,02H
	JZ	PAUSE_CHECK_END
WHILE_P_PUSHED:
	MOV	AX,0040H		;P
	CALL	KEY
	AND	AL,02H
	JNZ	WHILE_P_PUSHED
UNTIL_CR_PUSH:
	CALL	POWEROFF_CHECK
	MOV	AX,0080H		;CR
	CALL	KEY
	AND	AH,02H
	JZ	UNTIL_CR_PUSH
PAUSE_CHECK_END:
	RET

KEY:
	MOV	DX,200H
	OUT	DX,AX
	CALL	K_WAIT
	MOV	DX,202H
	IN	AX,DX
	RET
K_WAIT:
	PUSH	CX
	MOV	CX,0009H
K_LOOP:
	LOOP	K_LOOP
	POP	CX
	RET

;**************************************
;矢印表示サブ
;**************************************

ARROW_PRINT:
	MOV	DL,ARROW_DERECTION
	MOV	DH,ARROW_DERECTION2
	CALL	ARROW_PRINT_MAIN
	RET
ARROW_DISPRINT:
	XOR	DX,DX
	CALL	ARROW_PRINT_MAIN
	RET

ARROW_PRINT_MAIN:
	MOV	BL,ARROW_X
	MOV	BH,ARROW_Y
	CALL	PRINT
	CMP	BL,0
	JNZ	ARROW_PRINT_0
	CMP	BH,2
	JNZ	ARROW_PRINT_RET
ARROW_PRINT_0:
	DEC	BL
	MOV	DL,DH
	CALL	PRINT
ARROW_PRINT_RET:
	RET

;**************************************
;各種データ
;**************************************

VECTOR_X:
	DB	0,0,1,0,-1
VECTOR_Y:
	DB	0,-1,0,1,0
ARROW_FONT:
	DB	0,0,0,0,0,0
	DB	008H,01CH,02AH,008H,008H,000H	;矢印（上）
	DB	008H,004H,03EH,004H,008H,000H	;矢印（右）
	DB	008H,008H,02AH,01CH,008H,000H	;矢印（下）
	DB	008H,010H,03EH,010H,008H,000H	;矢印（左）

	DB	000H,000H,00CH,00CH,000H,000H
	DB	000H,00CH,012H,012H,00CH,000H
	DB	000H,01EH,012H,012H,01EH,000H
	DB	01EH,021H,021H,021H,021H,01EH
	DB	03FH,021H,021H,021H,021H,03FH
	DB	000H,000H,000H,000H,000H,000H

	DB	03CH,022H,03CH,020H,020H,000H
	DB	03DH,03DH,000H,02FH,02FH,000H

TITLE_GRAPH:
	DB	000H,000H,000H,000H,001H,003H,003H,007H,007H
	DB	007H,007H,007H,003H,001H,000H,000H,000H,000H
	DB	000H,01FH,070H,0E0H,0C0H,080H,080H,080H,000H
	DB	000H,000H,000H,001H,083H,0FCH,000H,000H,000H
	DB	000H,027H,0E3H,0E3H,041H,041H,001H,001H,000H
	DB	000H,001H,001H,081H,003H,007H,000H,000H,000H
	DB	000H,0E7H,0C3H,082H,0C4H,0C8H,0C8H,0D0H,0E0H
	DB	0E0H,0C0H,0C0H,0C0H,0C0H,0F0H,000H,000H,000H
	DB	000H,083H,00EH,01CH,038H,070H,070H,0F0H,0E0H
	DB	0E0H,0E0H,0E0H,060H,030H,01FH,000H,000H,000H
	DB	000H,0E4H,01CH,01CH,008H,008H,000H,000H,000H
	DB	000H,001H,001H,031H,063H,087H,000H,000H,000H
	DB	000H,0FEH,078H,070H,070H,070H,0E0H,0E0H,0E0H
	DB	0E0H,0C0H,0C0H,0C1H,0C7H,0FFH,000H,000H,000H
	DB	000H,007H,003H,003H,003H,003H,007H,007H,007H
	DB	007H,00EH,08EH,08EH,01EH,07FH,000H,000H,000H
	DB	000H,0FFH,0C3H,081H,080H,088H,018H,0F8H,010H
	DB	010H,000H,002H,006H,01CH,0FCH,000H,000H,000H
	DB	000H,087H,08EH,01CH,01CH,01EH,00FH,007H,003H
	DB	001H,040H,040H,060H,0F1H,08FH,000H,000H,000H
	DB	000H,0C8H,078H,038H,010H,010H,000H,080H,0C0H
	DB	0E0H,0E0H,0E0H,0E0H,0C0H,080H,000H,000H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	000H,001H,001H,001H,000H,000H,000H,000H,000H
	DB	000H,01FH,033H,073H,073H,073H,03AH,01CH,06EH
	DB	0CFH,0C7H,0C7H,0C7H,0CEH,078H,000H,000H,000H
	DB	000H,003H,086H,08EH,09CH,01CH,01CH,01CH,01CH
	DB	00FH,001H,001H,003H,00EH,018H,000H,000H,000H
	DB	000H,0C0H,060H,070H,071H,073H,0F3H,0F3H,0E7H
	DB	0E7H,0C7H,086H,006H,002H,001H,000H,000H,000H
	DB	000H,038H,064H,0C6H,0C6H,08EH,08EH,08EH,01CH
	DB	01CH,01CH,038H,030H,070H,0C1H,000H,000H,000H
	DB	000H,03FH,01EH,01CH,01CH,01CH,038H,038H,03FH
	DB	038H,070H,070H,070H,0F0H,0F8H,000H,000H,000H
	DB	000H,0E0H,070H,038H,038H,038H,070H,0E0H,0C0H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	039H,010H,011H,012H,014H,018H,010H,010H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	0C0H,080H,000H,036H,053H,0E2H,084H,0E4H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	004H,01CH,008H,088H,008H,008H,010H,039H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	002H,00EH,004H,004H,004H,004H,008H,01CH,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	031H,048H,009H,009H,011H,022H,04AH,0F3H,000H
	DB	000H,000H,000H,000H,000H,000H,000H,000H,000H
	DB	080H,080H,000H,0E0H,020H,020H,040H,080H,000H

MOJI_SCORE		DB	'SCORE:',0
MOJI_PUSH_SPACE_KEY	DB	'PUSH SPACE KEY',0
MOJI_GAMEOVER		DB	'GAME OVER',0

;**************************************
;ワークエリア
;**************************************

ARROW_X			DB	1 DUP(?)
ARROW_Y			DB	1 DUP(?)
KEY_REPEAT		DB	1 DUP(?)
KEY_REPEAT_2		DB	1 DUP(?)
KEY_REPEAT_3		DB	1 DUP(?)
ARROW_DERECTION		DB	1 DUP(?)
ARROW_DERECTION2	DB	1 DUP(?)
NEXT_ARROW_DERECTION	DB	1 DUP(?)
NEXT_ARROW_DERECTION2	DB	1 DUP(?)
BRAM			DB	80 DUP(?)
VANISH_BLOCK		DB	80 DUP(?)
VANISH_CHECK_WORK	DB	80 DUP(?)
DOWN_WAIT		DW	1 DUP(?)
DELTA_Y			DB	1 DUP(?)
VANISH_THIS_TIME	DB	1 DUP(?)
UNTIL_PRIMER		DB	1 DUP(?)
VANISH_NUMBER		DW	1 DUP(?)
SCORE1			DW	1 DUP(?)
SCORE2			DW	1 DUP(?)
SCORE_PLUS1		DW	1 DUP(?)
SCORE_PLUS2		DW	1 DUP(?)
RENSA_NUMBER		DW	1 DUP(?)

CODE	ENDS
	END	START
