;GALAXY WALL TWIN 
; coupling with GALAXY WALL
; for FX-890P/Z-1
;Programming By ABCP
;(C) 1996 ABCP software
;Special Thanks To 
; Saeki Toshimichi & Sekidomegumi
;¼­³¾²ÃÝ:CMPÒ²Ú²É »²Ã·¶

INTRO:
    CLD
    XOR AX,AX
    MOV DS,AX
    MOV ES,AX

CPYRIGHT:
    CALL CLS
    DB  0BEH
    DW  OFFSET ABCP ;SI
    MOV AX,1E26H
    CALL G_PRINT
    DB  0BEH
    DW  OFFSET ALLRIGHT ;SI
    MOV AX,2734H
    CALL G_PRINT
    XOR AL,AL
COPY_1:
    CALL VRAMLCD2
    INC AL
    CMP AL,32
    JNZ COPY_1
    XOR CX,CX
COPY_2:
    PUSH AX ;14
    POP AX  ;14
    LOOP COPY_2
    ;CALL CLS
    MOV AX,1E06H
    DB  0BEH
    DW  OFFSET ABCP ;SI
    CALL G_PRINT
    DB  0BEH
    DW  OFFSET ALLRIGHT ;SI
    MOV AX,2714H
    CALL G_PRINT
    XOR AL,AL
COPY_3:
    CALL VRAMLCD2
    INC AL
    CMP AL,32
    JNZ COPY_3
    MOV AH,1BH
    INT 41H
    MOV AH,4
    INT 41H
    SUB DL,30H
    JNA SELECT
    CMP DL,4
    JA  SELECT
    MOV GAMEMODE,DL
SELECT:
    CALL CLS
;select the mode, level, etc
    DB  0A0H
    DW  OFFSET GAMEMODE
    DEC AL
    JNZ N_SOLO1P
    JMP SOLO_1P
N_SOLO1P:
    DEC AL
    JNZ N_SOLO2P
    JMP SOLO_2P
N_SOLO2P:
    DEC AL
    JNZ N_VSMODE
    JMP VS_MODE
N_VSMODE:
    JMP COMMODE

SOLO_1P:
SOLO_2P:
    CALL GAME
    JNC CONT_1
    JMP CPYRIGHT
CONT_1:
    DB  0BBH
    DW  OFFSET G_WIN ;MOV BX,OFFSET G_WIN
    DB  0B9H
    DW  OFFSET G_LOSE ;MOV CX,OFFSET G_LOSE
    DB  0A0H
    DW  OFFSET GV_FRAG ;AL=
    TEST AL,02H
    JNZ LOSE_1PS
    XCHG BX,CX
LOSE_1PS:
    CMP AL,3
    JNZ N_DRAW
    DB  0BBH
    DW  OFFSET G_DRAW ;MOV BX,OFFSET G_DRAW
    MOV CX,BX
N_DRAW:
    MOV AX,1808H
    MOV SI,BX
    CALL G_PRINT
    MOV AX,7E08H
    MOV SI,CX
    CALL G_PRINT
    XOR AL,AL
    CALL VRAMLCD2
GAMESET:
    MOV AH,1BH
    INT 41H
    MOV AH,4
    INT 41H
    CMP DL,13
    JNZ GAMESET
    JMP SOLO_2P

VS_MODE:
    CALL GAME
    JNC CONT_2
    JMP CPYRIGHT
CONT_2:
    DB  0BBH
    DW  OFFSET G_WIN ;MOV BX,OFFSET G_WIN
    DB  0B9H
    DW  OFFSET G_LOSE ;MOV CX,OFFSET G_LOSE
    DB  0A0H
    DW  OFFSET GV_FRAG ;AL=
    TEST AL,02H
    JNZ LOSE_1P
    XCHG BX,CX
LOSE_1P:
    CMP AL,3
    JNZ NOT_DRAW
    DB  0BBH
    DW  OFFSET G_DRAW ;MOV BX,OFFSET G_DRAW
    MOV CX,BX
NOT_DRAW:
    MOV AX,1808H
    MOV SI,BX
    CALL G_PRINT
    MOV AX,7E08H
    MOV SI,CX
    CALL G_PRINT
    XOR AL,AL
    CALL VRAMLCD2
GAMEOVER:
    MOV AH,1BH
    INT 41H
    MOV AH,4
    INT 41H
    CMP DL,13
    JNZ GAMEOVER
    JMP VS_MODE

COMMODE:
    CALL GAME
    JNC CONT_3
    JMP CPYRIGHT
CONT_3:
    XOR CX,CX
COMWAIT:
    AAA ;8
    LOOP COMWAIT ;17(4)
    JMP COMMODE


GAME:
    CALL WORKINIT
    CALL P1_P2
    CALL WORKINIT
    CALL P1_P2
    MOV BYTE PTR KEY_1P,0FFH
    MOV BYTE PTR KEY_2P,0FFH
    DB  0A0H
    DW  OFFSET GAMEMODE ;MOV AL,GAMEMODE
    DEC AL
    JNZ SOLO_R
SOLO_L:
    DB  0BEH
    DW  OFFSET SOLO_K ;SI
    DB  0BFH
    DW  OFFSET KEY_1P ;DI
    MOV CX,12
    REP MOVSW
    JMP COM_INFO
SOLO_R:
    DEC AL
    JNZ VS
    DB  0BEH
    DW  OFFSET SOLO_K ;SI
    DB  0BFH
    DW  OFFSET KEY_2P ;DI
    MOV CX,12
    REP MOVSW
    JMP COM_INFO
VS:
    DEC AL
    JNZ WATCH;VS
    DB  0BEH
    DW  OFFSET VS_1PK ;SI
    DB  0BFH
    DW  OFFSET KEY_1P ;DI
    MOV CX,12
    REP MOVSW
    DB  0BEH
    DW  OFFSET VS_2PK ;SI
    DB  0BFH
    DW  OFFSET KEY_2P ;DI
    MOV CX,12
    REP MOVSW
    JMP COM_INFO
WATCH:
COM_INFO:

SCRL:
;1P
    DB  0BEH
    DW  OFFSET WRITE_1 ;SI
    DB  0BFH
    DW  OFFSET REWRITE ;DI
    MOV CX,15
    REP MOVSB
    CALL PUT
    CALL SCROLL
    CALL KEY_CHK
    CALL TAMA_MV
    CALL P1_P2
;2P
    DB  0BEH
    DW  OFFSET WRITE_2 ;MOV SI,OFFSET WRITE_2
    DB  0BFH
    DW  OFFSET REWRITE ;MOV DI,OFFSET REWRITE
    MOV CX,15
    REP MOVSB
    CALL PUT
    CALL SCROLL
    CALL KEY_CHK
    CALL TAMA_MV
    CALL P1_P2
;check
    CALL FRASH
    CALL VRAM_LCD
    DB  0A0H
    DW  OFFSET GV_FRAG ;MOV AL,GV_FRAG
    OR  AL,AL
    JNZ G_OVER_1
    CALL BRK_CHK
    JC  TO_MAIN
    JMP SCRL
TO_MAIN:
    RET
G_OVER_1:
    DB  0BEH
    DW  OFFSET OR_1 ;SI
    MOV BYTE PTR [SI],08H
    TEST AL,01H
    JNZ G_OVER_2
    MOV BYTE PTR [SI],84H
G_OVER_2:
    DB  0BEH
    DW  OFFSET OR_2
    MOV BYTE PTR [SI],08H
    TEST AL,02H
    JNZ G_OVER_3
    MOV BYTE PTR [SI],84H
G_OVER_3:
BLACK:
    MOV SI,650H
    MOV DI,870H
    MOV BL,15
BLACK_2:
    MOV CX,32
BLACK_1:
    CALL RND
OR_1:
    OR  [SI],DL
    CALL RND
OR_2:
    OR  [DI],DL
    INC SI
    INC DI
    LOOP BLACK_1
    CALL VRAM_LCD
    DEC BL
    JNZ BLACK_2

    STD
    MOV SI,088FH
    MOV DI,0E0FH
V_1:
    MOV CX,32
    REP MOVSB
    SUB DI,32
    ADD SI,64
    CMP SI,0A8FH
    JNZ V_1
    MOV SI,84FH
V_2:
    MOV CX,32
    REP MOVSB
    SUB DI,32
    CMP SI,64FH
    JNZ V_2
    CLD
    XOR AL,AL
    CALL VRAMLCD2
    CLC
    RET

WORKINIT:
    DB  0BFH
    DW  OFFSET BRAM
    MOV CX,OFFSET P1_DATAE
    SUB CX,DI
    XOR AL,AL
    REP STOSB
    DB  0BEH
    DW  OFFSET LEVEL ;SI
    DB  0BFH
    DW  OFFSET LEVEL_1P ;DI
    MOV AL,LEVEL1
    XOR AH,AH
    MOV BL,AL
    DB  0C0H,0E0H,2 ;SAL AL,2
    ADD AL,BL
    ADD SI,AX
    MOV CL,5 ;CX was 0
    REP MOVSB
    DEC SI
    MOV AL,[SI] ;SPEED
    MOV SPEED_2,AL
    MOV BYTE PTR SHOT_G,4
    MOV BYTE PTR SC_CNT,0BFH
    MOV BYTE PTR ZAHYOU,10H
    MOV BYTE PTR S_UP,18H
    RET

P1_P2:
    DB  0BEH
    DW  OFFSET P1_DATA ;MOV SI,OFFSET P1_DATA
    DB  0BFH
    DW  OFFSET P2_DATA ;MOV DI,OFFSET P2_DATA
    MOV CX,DI
    SUB CX,SI ;CX¦ ¸ÞÀ²Ã·Å¶½ÞÆ½Ù
P1_P2_1:
    MOV AL,[SI]
    XCHG AL,[DI]
    MOV [SI],AL
    INC SI
    INC DI
    LOOP P1_P2_1
    XOR BYTE PTR AND_1,0C3H
    RET

SCROLL:
    DB  0A0H
    DW  OFFSET SPEED ;MOV AL,SPEED
    SUB SC_CNT,AL
    JNC SCRL_RET
    ADD BYTE PTR SC_CNT,0C0H
    MOV CX,3FH
    DB  0BFH
    DW  OFFSET BRAM ;DI=?
    MOV SI,DI
    INC SI
SCRL_L:
    LODSB
    MOV [DI],AL
    INC DI
    LOOP SCRL_L
    DB  0BFH
    DW  OFFSET BRAM_D ;MOV DI,OFFSET BRAM / ADD DI,0FH
    MOV CL,4 ;CX was 0
SCRL_L2:
    MOV [DI],CH ;CH=0
    DB  083H,0C7H,16 ;ADD DI,10H
    LOOP SCRL_L2
    MOV CL,3
    XOR DH,DH
SCRL_L3:
    CALL RND
    AND DL,30H
    ADD DL,0FH
    DB  0BFH
    DW  OFFSET BRAM ;DI=?
    ADD DI,DX
    MOV BYTE PTR [DI],6
    LOOP SCRL_L3
SCRL_RET:
    RET

KEY_CHK:
    CMP BYTE PTR K_UP,0FFH
    JNE KEY_CHK1
    JMP THINKCOM ;ÄÍÞÙ¶Ó
KEY_CHK1:
    CALL INKEY
    DB  0BEH
    DW  OFFSET LASTKEY ;SI
KEY_INP:
    XOR AH,AH
KEY_UP:
    TEST BL,30H
    JZ  KEY_DOWN
    SUB AH,10H
KEY_DOWN:
    TEST BL,0CH
    JZ  MOVEABLE
    ADD AH,10H
MOVEABLE:
    OR  AH,AH
    JZ  MS_NT_M
    TEST BYTE PTR [SI],01H
    JNZ KEY_SHOT
    OR  BYTE PTR [SI],01H
    DB  0A0H
    DW  OFFSET ZAHYOU ;MOV AL,ZAHYOU
    ADD AL,AH
    CMP AL,40H
    JNC MS_NT_M
    DB  0A2H
    DW  OFFSET ZAHYOU ;MOV ZAHYOU,AL
    JC  KEY_SHOT ;JC=JMP
MS_NT_M:
    AND BYTE PTR [SI],0FEH
KEY_SHOT:
    TEST BL,03H
    JZ  SHOT_IMP
    TEST BYTE PTR [SI],02H
    JNZ PUT_MINE
    OR  BYTE PTR [SI],02H
    CALL TAMA_SET
    JMP PUT_MINE
SHOT_IMP:
    AND BYTE PTR [SI],0FDH
PUT_MINE:
    MOV BL,ZAHYOU
    MOV DX,1
    CALL PUT_CHR
    RET

TAMA_SET:
    DB  0BFH
    DW  OFFSET TAMAXY ;DI
    XOR BX,BX
TM_FIND:
    DB 0F6H,041H,001H,00FH ;TEST BYTE PTR [DI+BX+1],0FH
    JZ  TM_FOUND
    INC BX
    INC BX
    CMP BX,6
    JNZ TM_FIND
    STC
    RET
TM_FOUND:
    MOV AH,ZAHYOU
    INC AH
    XOR AL,AL
    MOV [DI+BX],AX
    DB  0A2H
    DW  OFFSET SHOT_G ;MOV SHOT_G,AL
    MOV SHOT_Z,AH
    ;CLC XOR AL,ALÃÞCY=0
    RET

TAMA_MV:
    MOV DL,SHOT_G
    TEST DL,04H
    JNZ TAMA_INC
    MOV BL,SHOT_Z
    XOR DH,DH
    ADD DL,11
    MOV BYTE PTR OR_PUT_1,84H
    MOV BYTE PTR OR_PUT_2,84H
    CALL PUT_CHR
    MOV BYTE PTR OR_PUT_1,20H
    MOV BYTE PTR OR_PUT_2,20H
    INC BYTE PTR SHOT_G
TAMA_INC:
    DB  0BFH
    DW  OFFSET TAMAXY ;DI
    XOR BX,BX
TM_INC_1:
    MOV AX,[DI+BX]
    TEST AH,0FH
    JZ  TM_NEXT
    MOV DL,AH
    MOV AL,AH
    XOR AH,AH
    DB  0BEH
    DW  OFFSET BRAM ;SI
    ADD SI,AX
    CMP [SI],AH ;AH=0
    JNZ GET_TGTH
    MOV AX,[DI+BX]
    DB  05H
    DW  0090H ;ADD AX,90H
    MOV [DI+BX],AX
    TEST AH,0FH
    JZ  TM_NEXT
    MOV DL,AH
    MOV AL,AH
    XOR AH,AH
    DB  0BEH
    DW  OFFSET BRAM
    ADD SI,AX
    CMP [SI],AH ;AH=0
    JZ  PUT_TAMA

GET_TGTH:
    DB  0C6H,44H,0FFH,6 ;MOV BYTE PTR [SI-1],6
    MOV AL,[BX+DI]
    XOR AH,AH
    MOV [DI+BX],AX
    MOV AL,DL
    DEC AL
    CALL VNSHCHCK
    JMP TM_NEXT

PUT_TAMA:
    MOV DX,15
    PUSH BX
    MOV BX,[DI+BX]
    CMP BL,80H
    JC  P_T_1
    INC BH
    MOV DH,3
P_T_1:
    TEST BH,0FH
    JZ  P_T_2
    MOV BL,BH
    MOV BYTE PTR OR_PUT_1,84H
    MOV BYTE PTR OR_PUT_2,84H
    CALL PUT_CHR
    MOV BYTE PTR OR_PUT_1,20H
    MOV BYTE PTR OR_PUT_2,20H
P_T_2:
    POP BX
TM_NEXT:
    INC BX
    INC BX
    CMP BX,6
    JNZ TM_INC_1
;¶ÍÞË®³¼Þ
    MOV BL,15 ;BH was 0
    XOR DX,DX
PUT_15:
    CALL PUT_CHR
    DB  083H,0C3H,16 ;ADD BX,16
    CMP BX,79
    JNE PUT_15
    RET

BK_SUB: ;entry AL=»ÞË®³
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DI
    XOR DH,DH
    TEST AL,0FH
    JZ  RET_RET
BK_INIT:
    XOR DL,DL
    XOR AH,AH
    MOV BX,AX
    AND BL,0FH
    MOV DI,BK_ADDR
    ADD DI,BX
BK_FIND:
    CMP AL,BL
    JZ  BK_EX
    CMP BYTE PTR [DI],0
    JZ  BK_REP
BK_EX:
    INC DL
BK_REP:
    DB  083H,0C7H,16 ;ADD DI,16
    ADD BL,10H
    CMP BL,40H
    JC  BK_FIND
    CMP DL,4
    JC  RET_RET
    MOV DI,BK_ADDR
    MOV BX,AX
    XOR BH,BH
    AND BL,0FH
    ADD DI,BX
    XOR CH,CH
    MOV CL,BL
    MOV BX,AX
BK_MV:
    DB  08AH,045H,0FH ;MOV AL,[DI+0FH]
    DB  088H,045H,10H ;MOV [DI+10H],AL
    DB  08AH,045H,1FH ;MOV AL,[DI+1FH]
    DB  088H,045H,20H ;MOV [DI+20H],AL
    DB  08AH,045H,2FH ;MOV AL,[DI+2FH]
    DB  088H,045H,30H ;MOV [DI+30H],AL
    DB  08AH,045H,255 ;MOV AL,[DI-1H]
    MOV [DI],AL
    DEC DI
    LOOP BK_MV
    XOR AL,AL
    MOV [DI],AL
    DB  088H,045H,10H ;MOV [DI+10H],AL
    DB  088H,045H,20H ;MOV [DI+20H],AL
    DB  088H,045H,30H ;MOV [DI+30H],AL
    INC DH
    MOV AX,BX
    JMP BK_INIT
RET_RET:
    POP DI
    POP CX
    POP BX
    POP AX
    RET
RET_RET2:
    POPA
    RET
;
;ÊÝÃ²,¼®³ÒÂ,ÃÝ¿³ ¼®Ø
;
VNSHCHCK:
    PUSHA
    MOV WORD PTR BK_ADDR,OFFSET BRAM
    CALL BK_SUB ;RET:DH=LINES,AH=Î¿ÞÝ
    OR  DH,DH ;CMP DH,0
    JZ  RET_RET2
    INC WORD PTR L_V_TM
    XOR BH,BH
    MOV BL,DH
    ADD L_V_HM,BX
    DB  0BEH
    DW  OFFSET S_UP ;SI
    INC BYTE PTR [SI]
    CMP BYTE PTR [SI],18H
    JC  VANISH_P
    MOV BYTE PTR [SI],0
    DB  0BEH
    DW  OFFSET SPEED ;SI
    CMP BYTE PTR [SI],10H
    JNC VANISH_P
    INC BYTE PTR [SI]
VANISH_P:
    MOV BH,DH
    MOV BL,AL
    AND BL,0FH
VANISH:
    MOV DI,G2_DATA
    ADD DI,80H ;16
    MOV CX,8
V_RND:
    CALL RND
    DB  080H,0E2H
AND_1:
    DB  0FCH ;AND DL,0FCH/03FH
    MOV [DI],DL
    INC DI
    LOOP V_RND
    ADD BL,30H
    PUSH DX
    MOV DL,16
    MOV DH,BIT
V_ANIME:
    CALL PUT_CHR
    SUB BL,10H
    JNC V_ANIME
    POP DX
    ADD BL,0FH ;10H + DEC BL
    DEC BH
    JNZ VANISH
    CMP DH,03H
    JC  RET_RET2
    MOV CL,DH
    SUB CL,2
    XOR BX,BX
    MOV AH,0FH
NEAR_ST:
    DB  0BFH
    DW  OFFSET BRAM_2 ;DI
    ADD DI,BX
    MOV CH,10H
    XOR DH,DH
NEAR_L:
    INC DI
    DB  080H,07DH,0FFH,000H ;CMP BYTE PTR [DI-1],0
    JNE NEAREST
    INC DH
    DEC CH
    JNZ NEAR_L
NEAREST:
    SUB DH,1
    JC  TAMA_L_E;RET_RET2
    CMP AH,DH
    JC  NEAR_NX
    MOV AH,DH
    MOV AL,AH
NEAR_NX:
    DB  083H,0C3H,16 ;ADD BX,10H
    DB  083H,0FBH,40H ;CMP BX,40H
    JNZ NEAR_ST
G_BLK:
    MOV CH,3
G_BLK_L:
    CALL RND
    AND DL,30H
    ADD DL,AH
    DB  0BFH
    DW  OFFSET BRAM_2 ;MOV DI,OFFSET BRAM_2
    XOR DH,DH
    ADD DI,DX
    CALL RND
    AND DL,03H
    ADD DL,7
    MOV [DI],DL
    DEC CH
    JNZ G_BLK_L
    SUB AH,1
    JC  REV_F
    LOOP G_BLK
REV_F:
    MOV BYTE PTR REV_2,1
    DB  0BFH
    DW  OFFSET TAMAXY2 ;MOV DI,OFFSET TAMAXY2
    XOR BX,BX
TAMA_CL:
    DB  08AH,061H,001H ;MOV AH,[DI+BX+1]
    AND AH,0FH
    CMP AL,AH
    JC  TAMA_NM
    DB  0C6H,041H,001H,000H ;MOV BYTE PTR [DI+BX+1],0
TAMA_NM:
    INC BX
    INC BX
    CMP BX,6
    JNZ TAMA_CL
TAMA_L_E:
    JMP RET_RET2

FRASH:
    CMP BYTE PTR REV,0
    JZ  FRASH_2P
    MOV DI,650H
    MOV CX,1E0H
FRS_1P_L:
    NOT BYTE PTR [DI]
    INC DI
    LOOP FRS_1P_L
FRASH_2P:
    CMP BYTE PTR REV_2,0
    JZ  G_OVER_C
    MOV DI,870H
    MOV CX,1E0H
FRS_2P_L:
    NOT BYTE PTR [DI]
    INC DI
    LOOP FRS_2P_L
G_OVER_C:
    MOV BYTE PTR GV_FRAG,0
    DB  0BFH
    DW  OFFSET BRAM ;DI
    MOV CL,4 ;CX
G_1P_L:
    CMP BYTE PTR [DI],1
    JNZ GV_1P
    OR  BYTE PTR GV_FRAG,1
GV_1P:
    DB  083H,0C7H,16 ;ADD DI,16
    LOOP G_1P_L
;2P
    DB  0BFH
    DW  OFFSET BRAM_2 ;MOV DI,OFFSET BRAM_2
    MOV CL,4 ;CX
G_2P_L:
    CMP BYTE PTR [DI],1
    JNZ GV_2P
    OR  BYTE PTR GV_FRAG,2
GV_2P:
    DB  083H,0C7H,16 ;ADD DI,16
    LOOP G_2P_L
    RET

;
;Computer ¼º³ Ù-ÁÝ
;
THINKCOM:
    CMP BYTE PTR IDOU_C,0H
    JZ COMINIT1
    DEC BYTE PTR IDOU_C
COMINIT1:
    CMP BYTE PTR SHOT_C,0H
    JZ COMINIT2
    DEC BYTE PTR SHOT_C
COMINIT2:
    CMP BYTE PTR PINCH,0
    JZ COMINIT3
    DEC BYTE PTR PINCH
COMINIT3:
    MOV BYTE PTR TM_ST,0
    DB  0BEH
    DW  OFFSET BRAM ;MOV SI,OFFSET BRAM ;TAMAXY
    DB  0BFH
    DW  OFFSET YOSOU ;MOV DI,OFFSET YOSOU ;YOSOU_T
    MOV CX,46H
    REP MOVSB
BEDE0:
    DB  0BFH
    DW  OFFSET YOSOU_T      ;MOV DI,OFFSET YOSOU_T
    DB  0F6H,045H,001H,00FH ;TEST BYTE PTR [DI+1],0FH
    JNZ BEDEF
    DB  0F6H,045H,003H,00FH ;TEST BYTE PTR [DI+3],0FH
    JNZ BEDEF
    DB  0F6H,045H,005H,00FH ;TEST BYTE PTR [DI+5],0FH
    JZ  BEE37
BEDEF:
    XOR BX,BX
BEDF2:
    MOV AX,[DI+BX]
    TEST AH,0FH
    JZ  BEE2D
    DB  05H
    DW  0090H ;ADD AX,90H
    MOV [DI+BX],AX
    TEST AH,0FH
    JZ  BEE2D
    DB  0BEH
    DW  OFFSET YOSOU ;MOV SI,OFFSET YOSOU
    MOV AL,AH
    XOR AH,AH
    ADD SI,AX
    CMP [SI],AH ;AH=0
    JZ  BEE2D
    DB  0C6H,044H,0FFH,001H ;MOV BYTE PTR [SI-1],1
    MOV AX,[DI+BX]
    MOV DL,AH
    DB  0C6H,041H,1,0 ;MOV BYTE PTR [DI+BX+1],0
    MOV AL,DL
    DEC AL
    MOV WORD PTR BK_ADDR,OFFSET YOSOU
    CALL BK_SUB
    DB  0BEH
    DW  OFFSET TAMAXY ;MOV SI,OFFSET TAMAXY
    MOV AX,[SI+BX]
    AND AH,0FH
    CMP DH,AH
    JC  BEE2D
    MOV BYTE PTR TM_ST,1
BEE2D:
    INC BX
    INC BX
    CMP BX,6
    JNZ BEDF2
    JMP BEDE0
BEE37:
    MOV WORD PTR WORK_1,0000H
    MOV WORD PTR WORK_1_3,0010H
    MOV WORD PTR WORK_1_5,0020H
    MOV WORD PTR WORK_1_7,0030H
    DB  0BFH
    DW  OFFSET WORK_1 ;MOV DI,OFFSET WORK_1
    XOR BX,BX
BEE4A:
    MOV AX,[DI+BX]
    XOR AH,AH
    DB  0BEH
    DW  OFFSET YOSOU ;SI
    ADD SI,AX
    MOV AX,[DI+BX]
    MOV CL,15 ;CX was 0
BEE53:
    MOV DL,[SI]
    INC SI
    OR  DL,DL
    JNZ BEE61
    ADD AH,10H
    LOOP BEE53
BEE61:
    SUB AH,0DH
    MOV DL,ZAHYOU
    SUB DL,AL
    JNC BEE70
    NEG DL
BEE70:
    DB  0C0H,0CAH,4 ;ROR DL,4
    SUB AH,DL
    MOV [DI+BX],AX
    INC BX
    INC BX
    CMP BX,8
    JNZ BEE4A
BEE7C:
    MOV AL,WORK_1_4
    CMP AL,WORK_1_2
    JNC BEE86
    MOV AX,WORK_1
    XCHG AX,WORK_1_3
    MOV WORK_1,AX
    JC  BEE7C
BEE86:
    MOV AL,WORK_1_6
    CMP AL,WORK_1_4
    JNC BEE90
    MOV AX,WORK_1_3
    XCHG AX,WORK_1_5
    MOV WORK_1_3,AX
    JC  BEE7C
BEE90:
    MOV AL,WORK_1_8
    CMP AL,WORK_1_6
    JNC BEE9A
    MOV AX,WORK_1_5
    XCHG AX,WORK_1_7
    MOV WORK_1_5,AX
    JC  BEE7C
BEE9A:
    CMP BYTE PTR WORK_1_2,44H
    JNC BEEA2
    MOV BYTE PTR PINCH,60H
BEEA2:
    MOV AL,WORK_1_8
    AND AL,0F0H
    DB  0C0H,0C8H,4 ;ROR AL,4
    DB  0BEH
    DW  OFFSET YOSOU ;MOV SI,OFFSET YOSOU
    XOR AH,AH
    ADD SI,AX
;   MOV AH,0 ;½ÃÞÆAH=0
    MOV CL,4 ;CX was 0
BEEB0:
    CMP BYTE PTR [SI],0
    JZ  BEEB8
    INC AH
BEEB8:
    ADD SI,10H
    LOOP BEEB0
    CMP AH,3
    MOV AL,WORK_1_7
    MOV WORK_2,AL
    JC  BEED5
    MOV AL,MATOME
    CMP WORK_1_2,AL
    JC  BEED5
    CMP BYTE PTR PINCH,0H
    JNZ BEED5
    MOV AL,WORK_1_5
    MOV WORK_2,AL
BEED5:
    CALL RND
    CMP MISS,DL
    JC BEEE3
    CALL RND
    AND DL,30H
    MOV WORK_2,DL
BEEE3:
    MOV AL,ZAHYOU
    CMP WORK_2,AL
    JNZ BEEFC
    CMP BYTE PTR SHOT_C,0
    JNZ BEF11
    CMP BYTE PTR TM_ST,0
    JNZ BEF11
    CALL TAMA_SET
    JC  BEF11
    MOV AL,SHOT_S
    MOV SHOT_C,AL
BEEFA:
    JMP PUT_MINE
BEEFC:
    CMP BYTE PTR IDOU_C,0
    JNZ BEF11
    MOV AL,IDOU_S
    MOV IDOU_C,AL
    MOV AL,ZAHYOU
    CMP WORK_2,AL
    JC  BEF0E
    ADD BYTE PTR ZAHYOU,10H
    JMP BEF11
BEF0E:
    SUB BYTE PTR ZAHYOU,10H
BEF11:
    JMP PUT_MINE

RND:
    PUSH AX
    PUSH BX
    PUSH CX
    DB  0B9H ;CX=?
RNDDT:
    DW  12DBH
    MOV BH,CH
    MOV BL,CL
    SAL BX,1
    ADD CX,BX
    MOV DL,CL
    ADD DL,CH
    MOV CH,DL
    DB  083H,0C1H,038H ;ADD CX,0038H
    MOV RNDDT,CX
    MOV DL,CH
    POP CX
    POP BX
    POP AX
    RET

PUT:
    MOV DH,SC_CNT
    DB  0C0H,0EEH,5 ;SHR DH,5
    NEG DH
    ADD DH,5
    MOV BIT,DH
    DB  0BDH ;BP=?
    DW  OFFSET BRAM
    MOV DI,VRAM_S
    XOR BL,BL
PUT_C_3:
    XOR BH,BH
PUT_C_2:
    XOR DL,DL
    MOV AX,DS:[BP]
    CMP AL,2
    JC  PUT_A
    MOV DL,AL
    XOR AL,AL
PUT_A:
    SAL AL,1
    CMP AH,2
    JNC PUT_B
    OR  AL,AH
PUT_B:
    SAL AL,1
    MOV AH,AL
    SAL AL,1
    ADD AL,AH
    ADD AL,DH
    XOR AH,AH
    DB  0C1H,0E0H,3 ;SAL AX,3
    MOV SI,G_DATA
    ADD SI,AX
    MOV CX,8
PUT_C_1:
    REP MOVSB
    OR  DL,DL ;CMP DL,0
    JE  PUT_Z
    PUSH BX
    DB  0C0H,0E7H,4 ;SAL BH,4
    ADD BL,BH
    CALL PUT_CHR
    POP BX
PUT_Z:
    CMP BYTE PTR DS:[BP],2
    JC  PUT_ND
    DEC BYTE PTR DS:[BP]
PUT_ND:
    DB  083H,0C5H,16 ;ADD BP,16
    INC BH
    CMP BH,4
    JNZ PUT_C_2
    SUB BP,63 ;-16*4+1
    INC BL
    CMP BL,16
    JNZ PUT_C_3
    RET

PUT_CHR: ;BL*32,BH*8
    PUSHA
    MOV AL,BL
    AND AX,0000FH ;XOR AH,AH/AND AL,0FHÖØ1ÊÞ²Ä¾ÂÔ¸
    DB  0C1H,0E0H,5 ;SAL AX,5
    MOV CL,BL
    AND CX,000F0H
    SHR CL,1
    ADD AX,CX
    MOV SI,VRAM_S
    ADD SI,AX
    MOV CL,DH
    XOR DH,DH
    DB  0C1H,0E2H,3 ;SAL DX,3
    MOV DI,G2_DATA
    ADD DI,DX
    MOV CH,8
PUT_LOOP:
    MOV DH,[DI]
    XOR DL,DL
REWRITE:
    DB  0,0,0,0,0,0,0,0
    DB  0,0,0,0,0,0,0
OR_PUT_1:
    AND [SI],BH ;20H=>84H(when OR)=TEST
    OR  [SI],DH
OR_PUT_2:
    DB  20H,5CH,0E0H ;AND [SI-32],BL ;20H=>84H(when OR)=TEST
    DB  08H,54H,0E0H ;OR  [SI-32],DL
    INC SI
    INC DI
    DEC CH
    JNZ PUT_LOOP
    POPA
    RET

CLS:
    MOV DI,630H
    MOV CX,1024
    XOR AX,AX
    REP STOSW
    RET

VRAM_LCD:
    PUSH ES
    PUSHA
    MOV SI,650H
BDISP:
    MOV AX,0A000H
    MOV ES,AX
    XOR DI,DI
    MOV BL,6
BDISP1:
    MOV AL,21H
    STOSB
    MOV AL,BL
    STOSB
    MOV AL,22H
    STOSB
    MOV AL,0
    STOSB
    MOV AL,20H
    STOSB
    MOV CX,32
BDISP2:
    LODSB
    NOP
    NOP
    NOP
    STOSB
    DEC DI
    LOOP BDISP2
    DEC DI
    INC BL
    CMP BL,22
    JNZ BDISP1

    MOV SI,870H
    MOV BL,21
BDISP3:
    MOV AL,21H
    STOSB
    MOV AL,BL
    STOSB
    MOV AL,22H
    STOSB
    MOV AL,32
    STOSB
    MOV AL,20H
    STOSB
    MOV CX,32
BDISP4:
    LODSB
    NOP
    NOP
    NOP
    STOSB
    DEC DI
    LOOP BDISP4
    DEC DI
    DEC BL
    CMP BL,5
    JNZ BDISP3
    MOV BYTE PTR REV,CL ;CL=0
    MOV BYTE PTR REV_2,CL ;CL=0
    POPA
    POP ES
    RET

VRAMLCD2: ;AL=Y
    PUSH ES
    PUSHA
    XOR AH,AH
    MOV SI,630H
    ADD SI,AX
    MOV AX,0A000H
    MOV ES,AX
    XOR DI,DI
    XOR BH,BH
BDISP5:
    MOV BL,6
BDISP6:
    MOV AL,21H
    STOSB
    MOV AL,BL
    STOSB
    MOV AL,22H
    STOSB
    MOV AL,BH
    STOSB
    MOV AL,20H
    STOSB
    MOV CX,32
BDISP7:
    LODSB
    NOP
    NOP
    NOP
    STOSB
    DEC DI
    LOOP BDISP7
    DEC DI
    ADD SI,32
    INC BL
    CMP BL,22
    JNZ BDISP6
    ADD BH,32
    CMP BH,64
    JNZ BDISP5
    POPA
    POP ES
    RET

INKEY: ;BX=(UP),(UP),(DOWN),(DOWN),(SHOT),(SHOT)
    CLI
    MOV DX,0200H
    MOV AX,1FFFH
    OUT DX,AX
    XOR AX,AX
    OUT DX,AX
    XOR BX,BX
    MOV AX,K_UP
    MOV CX,K_UP_S
    CALL KEY
    MOV AX,K_UPP
    MOV CX,K_UPP_S
    CALL KEY
    MOV AX,K_DOW
    MOV CX,K_DOW_S
    CALL KEY
    MOV AX,K_DWW
    MOV CX,K_DWW_S
    CALL KEY
    MOV AX,K_ST
    MOV CX,K_ST_S
    CALL KEY
    MOV AX,K_STS
    MOV CX,K_STS_S
    CALL KEY

    XOR AX,AX
    OUT 46H,AX
    MOV DX,200H
    MOV AX,007FFH
    OUT DX,AX
    CALL K_WAIT
    MOV DX,204H
    MOV AL,03H
    OUT DX,AL
    DEC AL
    OUT DX,AL
    STI
    RET

BRK_CHK:
    CLI
    MOV DX,200H
    MOV AX,1FFFH
    OUT DX,AX
    XOR AX,AX
    OUT DX,AX
    INC AX ;AX=1
    MOV CX,4001H
    CALL KEY
    XOR AL,AH
    TEST AL,41H
    JZ  K_1
    MOV AH,07FH
    INT 41H
    ;RET
K_1:
    MOV AX,0400H
    MOV CX,0010H
    CALL KEY
    SHR BX,1
    PUSHF
    XOR AX,AX
    OUT 46H,AX
    MOV DX,200H
    MOV AX,007FFH
    OUT DX,AX
    CALL K_WAIT
    MOV DX,204H
    MOV AL,03H
    OUT DX,AL
    DEC AL
    OUT DX,AL
    POPF
    STI
    RET

KEY:
    MOV DX,200H
    OUT DX,AX
    CALL K_WAIT
    MOV DX,202H
    IN  AX,DX
    SAL BX,1
    AND AX,CX
    JZ  K_END
    OR  BL,01H ;BX
K_END:
    RET

K_WAIT:
    PUSH CX
    MOV CX,0009H
K_LOOP:
    LOOP K_LOOP
    POP CX
    RET

G_PRINT: ;(AH,AL)=(X,Y)
    PUSHA
    MOV DX,[SI]
    INC SI
    INC SI
    MOV DI,630H
    XOR CH,CH
    MOV CL,AL ;Y
    ADD DI,CX
    MOV AL,AH
    XOR AH,AH
    MOV CH,6
    DIV CH
    MOV CL,AH;±ÏØ
    XOR AH,AH
    DB  0C1H,0E0H,6 ;SAL AX,6
    ADD DI,AX ;DI is ready
    PUSH DI
    MOV CH,DL
GP_2:
    MOV AL,[SI]
    MOV BL,0C0H
    SAR BL,CL
    SHR AL,CL
    AND [DI],BL
    OR  [DI],AL ;ËÀÞØÊ¼Þ
    INC DI
    INC SI
    DEC CH
    JNZ GP_2
    POP DI
    ADD DI,64
GP_3:
    DEC DH
    JZ  GP_5
    PUSH DI
    MOV CH,DL
GP_4:
    XOR BH,BH
    MOV BL,DL
    NEG BX
    MOV AH,[SI+BX] ;[SI-BX]
    MOV AL,[SI]
    MOV BL,0C0H
    SAL AL,1
    SAL AL,1
    SHR AX,CL
    SHR AL,1
    SHR AL,1
    AND [DI],BL
    OR  [DI],AL
    INC SI
    INC DI
    DEC CH
    JNZ GP_4
    POP DI
    ADD DI,64
    JMP GP_3

GP_5: ;Ð·ÞÊ¼Þ
    NEG CL
    ADD CL,6
    MOV CH,DL
GP_6:
    XOR BH,BH
    MOV BL,DL
    NEG BX
    MOV AL,[SI+BX] ;[SI-BX]
    MOV BL,0FCH
    SAL AL,1
    SAL AL,1
    SHL AL,CL
    SHR AL,1
    SHR AL,1
    MOV BH,CL
    NEG CL
    ADD CL,6
    SAL BL,CL
    SHR BL,CL
    SHR BL,1
    SHR BL,1
    MOV CL,BH
    AND [DI],BL
    OR  [DI],AL
    INC DI
    INC SI
    DEC CH
    JNZ GP_6
    POPA
    RET

;
;DATAs
;

WRITE_1:
    MOV BX,003FFH
    ROL BX,CL
    ROL DX,CL
    SHR DH,1
    SHR DH,1
    SHR BH,1
    SHR BH,1
WRITE_2:
    MOV BX,0C0FFH
    ROR BX,CL
    ROR DX,CL
    SHR DL,1
    SHR DL,1
    SHR BL,1
    SHR BL,1
DATA:
    DB  000H,000H,000H,000H,004H,000H,000H,000H
    DB  000H,000H,000H,000H,008H,000H,000H,000H
    DB  000H,000H,000H,000H,010H,000H,000H,000H
    DB  000H,000H,000H,000H,020H,000H,000H,000H
    DB  000H,000H,000H,000H,001H,000H,000H,000H
    DB  000H,000H,000H,000H,002H,000H,000H,000H

    DB  000H,000H,000H,000H,004H,000H,000H,000H
    DB  001H,001H,001H,001H,009H,001H,001H,001H
    DB  003H,002H,002H,002H,012H,003H,002H,003H
    DB  007H,004H,004H,004H,025H,006H,005H,007H
    DB  00FH,008H,008H,009H,00AH,00DH,00BH,00FH
    DB  01FH,010H,011H,013H,015H,01BH,017H,01FH

    DB  03FH,021H,023H,027H,02BH,037H,02FH,03FH
    DB  03EH,002H,006H,00EH,016H,02EH,01EH,03EH
    DB  03CH,004H,00CH,01CH,02CH,01CH,03CH,03CH
    DB  038H,008H,018H,038H,018H,038H,038H,038H
    DB  030H,010H,030H,030H,031H,030H,030H,030H
    DB  020H,020H,020H,020H,022H,020H,020H,020H

    DB  03FH,021H,023H,027H,02BH,037H,02FH,03FH
    DB  03FH,003H,007H,00FH,017H,02FH,01FH,03FH
    DB  03FH,006H,00EH,01EH,02EH,01FH,03EH,03FH
    DB  03FH,00CH,01CH,03CH,01DH,03EH,03DH,03FH
    DB  03FH,018H,038H,039H,03AH,03DH,03BH,03FH
    DB  03FH,030H,031H,033H,035H,03BH,037H,03FH

VDATA:
    DB  80H,80H,80H,80H,80H,80H,80H,80H ;X=16
    DB  0E0H,0B0H,0E8H,0BCH,0BCH,0E8H,0B0H,0E0H ;MY_SHIP
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH ;ÌÞÛ¯¸¶Þ¢ÄÞ³¶£¼ÀÄ·É±ÆÒ
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH ;7
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH
    DB  0FCH,84H,84H,84H,84H,84H,84H,0FCH
    DB  010H,024H,058H,0F8H,0C4H,070H,028H,010H ;¹ÑØ
    DB  010H,020H,014H,008H,01CH,010H,02CH,010H
    DB  010H,008H,008H,004H,004H,004H,008H,010H
    DB  008H,000H,000H,000H,004H,000H,000H,008H
    DB  0,0,3CH,24H,2CH,3CH,0,0 ;15=TAMA
RND_G:
    DB  0,0,0,0,0,0,0,0
DATA_2:
    DB  0,0,0,0,4,0,0,0
    DB  0,0,0,0,2,0,0,0
    DB  0,0,0,0,1,0,0,0
    DB  0,0,0,0,32,0,0,0
    DB  0,0,0,0,16,0,0,0
    DB  0,0,0,0,8,0,0,0

    DB  0,0,0,0,4,0,0,0
    DB  20H,20H,20H,20H,22H,20H,20H,20H
    DB  30H,10H,30H,30H,31H,30H,30H,30H
    DB  38H,8,18H,38H,18H,38H,38H,38H
    DB  3CH,4,0CH,1CH,2CH,1CH,3CH,3CH
    DB  3EH,02H,06H,0EH,16H,2EH,1EH,3EH

    DB  3FH,21H,23H,27H,2BH,37H,2FH,3FH
    DB  31,16,17,19,21,27,23,31
    DB  15,8,8,9,10,13,11,15
    DB  7,4,4,4,25H,6,5,7
    DB  3,2,2,2,12H,3,2,3
    DB  1,1,1,1,9,1,1,1

    DB  3FH,21H,23H,27H,2BH,37H,2FH,3FH
    DB  3FH,30H,31H,33H,35H,3BH,37H,3FH
    DB  3FH,18H,38H,39H,3AH,3DH,3BH,3FH
    DB  3FH,0CH,1CH,3CH,1DH,3EH,3DH,3FH
    DB  3FH,06H,0EH,1EH,2EH,1FH,3EH,3FH
    DB  3FH,3,7,15,17H,2FH,1FH,3FH

VDATA_2:
    DB  1,1,1,1,1,1,1,1
    DB  007H,00DH,017H,03DH,03DH,017H,00DH,007H
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH ;7
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  3FH,21H,21H,21H,21H,21H,21H,3FH
    DB  008H,024H,01AH,01FH,023H,00EH,014H,008H
    DB  008H,004H,028H,010H,038H,008H,034H,008H
    DB  008H,010H,010H,020H,020H,020H,010H,008H
    DB  010H,000H,000H,000H,020H,000H,000H,010H
    DB  0,0,60,24H,2CH,60,0,0
RND_G2:
    DB  0,0,0,0,0,0,0,0 ;16

ABCP:
    DB  8,22 ;ÀÃ&Öº
    DB  009H,012H,024H,024H,024H,024H,012H,009H
    DB  024H,012H,009H,001H,001H,009H,012H,024H
    DB  000H,000H,000H,000H,000H,000H,000H,000H
    DB  001H,002H,002H,004H,004H,008H,010H,020H
    DB  01EH,021H,021H,01AH,004H,008H,010H,020H
    DB  01EH,021H,021H,01AH,005H,00AH,012H,021H
    DB  004H,008H,010H,020H,018H,004H,004H,038H
    DB  000H,000H,000H,000H,000H,000H,000H,003H
    DB  001H,001H,003H,005H,009H,01FH,021H,001H
    DB  003H,004H,005H,006H,009H,008H,008H,01FH
    DB  003H,024H,004H,008H,008H,028H,028H,007H
    DB  023H,012H,004H,004H,007H,004H,028H,008H
    DB  030H,008H,008H,010H,020H,000H,000H,000H
    DB  000H,000H,001H,002H,001H,004H,004H,003H
    DB  000H,000H,030H,009H,022H,014H,014H,023H
    DB  000H,000H,030H,00BH,009H,011H,022H,00CH
    DB  00CH,010H,020H,03BH,001H,002H,004H,003H
    DB  000H,000H,022H,034H,004H,009H,009H,006H
    DB  000H,000H,002H,004H,025H,009H,00AH,031H
    DB  000H,000H,019H,024H,004H,008H,011H,02DH
    DB  000H,000H,002H,02CH,031H,022H,002H,001H
    DB  000H,000H,01CH,022H,004H,038H,000H,038H

ALLRIGHT:
    DB  5,19
    DB  01CH,022H,03EH,022H,022H
    DB  020H,020H,020H,020H,03EH
    DB  020H,020H,020H,020H,03EH
    DB  000H,000H,000H,000H,000H
    DB  03CH,022H,03CH,024H,022H
    DB  039H,012H,012H,012H,039H
    DB  03AH,002H,01BH,00AH,03AH
    DB  00BH,008H,038H,008H,008H
    DB  039H,022H,021H,020H,023H
    DB  038H,000H,030H,008H,030H
    DB  003H,002H,003H,002H,002H
    DB  033H,00AH,033H,012H,00BH
    DB  039H,002H,031H,000H,03BH
    DB  03BH,002H,033H,00AH,033H
    DB  03BH,002H,033H,002H,03AH
    DB  032H,00AH,032H,011H,008H
    DB  00BH,00AH,00BH,012H,023H
    DB  03BH,002H,032H,002H,03BH
    DB  030H,008H,008H,008H,030H
G_WIN:
    DB  16,7
    DB  03FH,020H,020H,020H,023H,022H,022H,022H
    DB  022H,023H,021H,020H,020H,020H,020H,03FH
    DB  03FH,000H,000H,000H,020H,02EH,02AH,02AH
    DB  03BH,015H,02EH,03BH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,03FH,028H,02EH,02AH
    DB  02AH,01EH,038H,02FH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,03FH,009H,03AH,02BH
    DB  02BH,03AH,00AH,03EH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,007H,025H,035H,01DH
    DB  02DH,035H,019H,00FH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,03FH,024H,024H,024H
    DB  024H,03FH,024H,03FH,000H,000H,000H,03FH
    DB  03FH,001H,001H,001H,021H,021H,021H,021H
    DB  021H,021H,021H,021H,001H,001H,001H,03FH

G_LOSE:
    DB  16,7
    DB  03FH,020H,020H,020H,023H,022H,022H,022H
    DB  022H,022H,022H,023H,020H,020H,020H,03FH
    DB  03FH,000H,000H,000H,020H,021H,021H,021H
    DB  027H,03DH,001H,03FH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,03FH,021H,01EH,012H
    DB  012H,01EH,021H,03FH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,01FH,030H,02FH,030H
    DB  03FH,02FH,030H,01FH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,03FH,010H,037H,030H
    DB  017H,017H,030H,03FH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,038H,008H,038H,010H
    DB  030H,03FH,00AH,03FH,000H,000H,000H,03FH
    DB  03FH,001H,001H,001H,001H,001H,001H,001H
    DB  001H,021H,021H,021H,001H,001H,001H,03FH

G_DRAW:
    DB  16,7
    DB  03FH,020H,020H,020H,023H,022H,022H,022H
    DB  022H,022H,022H,023H,020H,020H,020H,03FH
    DB  03FH,000H,000H,000H,03EH,003H,03DH,026H
    DB  026H,03DH,003H,03EH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,03FH,020H,02FH,02FH
    DB  020H,02DH,02EH,03BH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,027H,03CH,01BH,017H
    DB  030H,037H,014H,03CH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,02EH,03AH,01AH,02AH
    DB  00BH,02DH,02EH,03BH,000H,000H,000H,03FH
    DB  03FH,000H,000H,000H,003H,03AH,02AH,02AH
    DB  02EH,015H,03BH,02EH,000H,000H,000H,03FH
    DB  03FH,001H,001H,001H,021H,021H,021H,021H
    DB  021H,021H,001H,001H,001H,001H,001H,03FH

LEVEL:
   ;DB  MISS,MATOME,IDOU_S,SHOT_S,SPEED
    DB  058H,0F4H,007H,005H,007H
    DB  048H,0F4H,005H,004H,007H
    DB  048H,074H,005H,003H,007H
    DB  028H,074H,005H,003H,008H
    DB  028H,054H,006H,004H,008H
    DB  030H,054H,004H,003H,008H
    DB  010H,054H,005H,002H,009H
    DB  030H,054H,002H,002H,009H
    DB  010H,054H,002H,001H,00AH
    DB  000H,054H,000H,000H,00AH
SOLO_K:
    DW  0100H,0010H ;8
    DW  0040H,0020H ;³´¶°¿Ù
    DW  0100H,0040H ;2
    DW  0020H,0100H ;¼À¶°¿Ù
    DW  0004H,0008H ;S
    DW  0010H,0080H ;SPC
VS_1PK:
    DW  0004H,0002H ;W
    DW  0004H,0004H ;E
    DW  0004H,0020H ;X
    DW  0004H,0020H ;X
    DW  0002H,0002H ;TAB
    DW  0800H,0800H ;SHIFT
VS_2PK:
    DW  0100H,0010H ;8
    DW  0400H,0002H ;SQR
    DW  0100H,0040H ;2
    DW  0200H,0008H ;(
    DW  0040H,0100H ;0
    DW  0080H,0100H ;E(between . and RET)
GAMEMODE    DB  1
P1_DATA:
BRAM        DB  15 DUP(?)
BRAM_D      DB  49 DUP(?)
TAMAXY      DB  6 DUP(?)
LASTKEY     DB  0
SHOT_Z      DB  0
PINCH       DB  0
L_V_TM      DW  0
L_V_HM      DW  0
IDOU_C      DB  0
SHOT_C      DB  0
REV         DB  0
BIT         DB  0
P1_DATAE:

SHOT_G      DB  4
SC_CNT      DB  0BFH
ZAHYOU      DB  10H
S_UP        DB  18H

LEVEL1:
            DB  9

LEVEL_1P:
MISS        DB  0
MATOME      DB  0
IDOU_S      DB  0
SHOT_S      DB  0
SPEED       DB  0

KEY_1P:
K_UP        DW  0
K_UP_S      DW  0
K_UPP       DW  0
K_UPP_S     DW  0
K_DOW       DW  0
K_DOW_S     DW  0
K_DWW       DW  0
K_DWW_S     DW  0
K_ST        DW  0
K_ST_S      DW  0
K_STS       DW  0
K_STS_S     DW  0

VRAM_S:
            DW  650H
G_DATA:
            DW  OFFSET DATA
G2_DATA:
            DW  OFFSET VDATA

P2_DATA:
BRAM_2      DB  15 DUP(?)
BRAM_D2     DB  49 DUP(?)
TAMAXY2     DB  6 DUP(?)
LASTKEY2    DB  0
SHOT_Z2     DB  0
PINCH_2     DB  0
L_V_TM2     DW  0
L_V_HM2     DW  0
IDOU_C2     DB  0
SHOT_C2     DB  0
REV_2       DB  0
BIT_2       DB  0
P2_DATAE:

SHOT_G2     DB  4
SC_CNT2     DB  0BFH
ZAHYOU2     DB  10H
S_UP2       DB  18H

LEVEL2:
            DB  9

LEVEL_2P:
MISS_2      DB  0
MATOME2     DB  0
IDOU_S2     DB  0
SHOT_S2     DB  0
SPEED_2     DB  0

KEY_2P:
K_UP2       DW  0
K_UP_S2     DW  0
K_UPP2      DW  0
K_UPP_S2    DW  0
K_DOW2      DW  0
K_DOW_S2    DW  0
K_DWW2      DW  0
K_DWW2_S    DW  0
K_ST2       DW  0
K_ST_S2     DW  0
K_STS2      DW  0
K_STS_S2    DW  0

VRAM_S_2:
            DW  870H
G_DATA_2:
            DW  OFFSET DATA_2
G2_DATA2:
            DW  OFFSET VDATA_2

YOSOU:
            DB  64 DUP(?)
YOSOU_T: ;ÄÞ³¼ÞÆÊÂ¶ÜÅ²
WORK_1:
            DB  1 DUP(?)
WORK_1_2:
            DB  1 DUP(?)
WORK_1_3:
            DB  1 DUP(?)
WORK_1_4:
            DB  1 DUP(?)
WORK_1_5:
            DB  1 DUP(?)
WORK_1_6:
            DB  1 DUP(?)
WORK_1_7:
            DB  1 DUP(?)
WORK_1_8:
            DB  1 DUP(?)
WORK_2: ;ÄÞ³¼ÞÆÊÂ¶ÜÅ²
GV_FRAG:
            DB  1 DUP(?)
TM_ST:
            DB  1 DUP(?)
BK_ADDR:
            DW  1 DUP(?)


