;******************************************************************************
;ＰＯＫＥＲ　ＡＣＴＩＯＮ　ｆｏｒ　ＦＸ－８９０Ｐ　Ｖｅｒ４．１７
;1997 (C) COPYRIGHT BY ABCP software
;******************************************************************************

	.186
CODE	SEGMENT
	ASSUME	CS:CODE,DS:CODE,SS:CODE,ES:CODE
	ORG	0100H
START:
	ORG	2000H

;**************************************
;タイトル表示
;**************************************

TITLE:
	XOR	DI,DI
	MOV	DS,DI
	MOV	AH,10H			;画面クリア
	INT	41H
BDISP1:
	MOV	SI,OFFSET TITLE_GRAPH	;タイトル画面表示
BDISP:
	MOV	AX,0A000H
	MOV	ES,AX
	MOV	AL,23H
	STOSB
	MOV	AL,35H
	STOSB
	MOV	DL,4
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,3
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CX,18
BDILP0:
	LODSB
	SHR	AL,4
	STOSB
	INC	DI
	LOOP	BDILP0
BDILP1:
	INC	DL
	INC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,3
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CL,18
BDILP2:
	MOV	AH,[SI-18]
	LODSB
	SHR	AX,4
	STOSB
	INC	DI
	LOOP	BDILP2
	CMP	DL,16
	JNZ	BDILP1
	SUB	SI,18
	MOV	DL,3
BDILP3:
	INC	DL
	INC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,35
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CL,18
BDILP4:
	MOV	AH,[SI-18]
	LODSB
	SHR	AX,4
	STOSB
	INC	DI
	LOOP	BDILP4
	CMP	DL,16
	JNZ	BDILP3
	INC	DI
	MOV	AL,23H
	STOSB
	MOV	AL,75H
	STOSB
	MOV	AL,20H
	STOSB
	MOV	ES,CX

	MOV	BX,0309H
	MOV	DI,OFFSET MOJI_PUSH_SPACE_KEY
	CALL	MOJI_PRINT
TITLE_BREAK_CHK:
	CALL	RND
	CALL	POWEROFF_CHECK
	MOV	AX,0010H
	CALL	KEY
	AND	AL,80H
	JZ	TITLE_BREAK_CHK

;**************************************
;ゲーム前の初期設定
;**************************************

INIT:
	MOV	AH,10H
	INT	41H
	MOV	CX,80
	XOR	AX,AX
	MOV	ES,AX
	MOV	DI,OFFSET BRAM
	REP	STOSB
	MOV	CL,53
	MOV	DI,OFFSET TRUMP_APPEAR
	REP	STOSB
	MOV	SCORE1,AX
	MOV	SCORE2,AX
	MOV	BYTE PTR DOWN_LIMIT,15
	MOV	WORD PTR DOWN_WAIT_COUNT,300

	MOV	DL,20			;壁表示
	XOR	BH,BH
WALL_Y_LOOP:
	MOV	BL,-2
WALL_X_LOOP:
	CALL	PRINT
	INC	BL
	OR	BL,BL
	JNZ	WALL_X_LOOP
WALL_Y_INC:
	INC	BH
	CMP	BH,2
	JZ	WALL_Y_INC
	CMP	BH,5
	JNZ	WALL_Y_LOOP

	MOV	BX,16
WALL_BOTTOM_LOOP:
	CALL	PRINT
	INC	BH
	CMP	BH,5
	JNZ	WALL_BOTTOM_LOOP

	MOV	BX,0113H
	MOV	DI,OFFSET MOJI_SCORE
	CALL	MOJI_PRINT
	XOR	AX,AX
	XOR	DX,DX
	CALL	SCORE_PRINT
	CALL	NEXT
	MOV	BX,0213H
	MOV	DI,OFFSET MOJI_YAKU
	CALL	MOJI_PRINT

;**************************************
;メインルーチン
;**************************************

SET:
	MOV	BYTE PTR TRUMP_X,0
	MOV	BYTE PTR TRUMP_Y,2
	CALL	NEXT
	MOV	BYTE PTR KEY_REPEAT,0
	DEC	WORD PTR DOWN_WAIT_COUNT
	CMP	WORD PTR DOWN_WAIT_COUNT,150
	JA	CALC_WAIT
	MOV	WORD PTR DOWN_WAIT_COUNT,150
CALC_WAIT:
DOWN_CONT:
	MOV	AX,DOWN_WAIT_COUNT
	MOV	DOWN_WAIT,AX
	CALL	TRUMP_PRINT
DOWN_LOOP:
	CALL	RND
	CALL	POWEROFF_CHECK
	CALL	PAUSE_CHECK
	CALL	CHK			;Y方向の変化量を返す
	CMP	BYTE PTR DELTA_Y,0
	JZ	RE_CHR_PUT
	CALL	TRUMP_DISPRINT
RE_CHR_PUT:
	MOV	BH,TRUMP_Y
	ADD	BH,BYTE PTR DELTA_Y
	MOV	BYTE PTR TRUMP_Y,BH
	CALL	TRUMP_PRINT
DOWN_LOOP_END:
	SUB	WORD PTR DOWN_WAIT,1
	JNC	DOWN_LOOP
	CALL	TRUMP_DISPRINT

	MOV	AL,DOWN_LIMIT
	CMP	TRUMP_X,AL
	JZ	BOTTOM

	MOV	BL,TRUMP_X
	MOV	BH,TRUMP_Y
	CALL	XY
	CMP	BYTE PTR [DI+1],0
	JNZ	BOTTOM

	INC	BYTE PTR TRUMP_X
	CMP	BYTE PTR TRUMP_X,1
	JC	TO_DOWN_CONT

	MOV	BL,-1
	MOV	BH,2
	MOV	DL,NEXT_TRUMP_MARK
	CALL	PRINT
	DEC	BL
	MOV	DL,NEXT_TRUMP_NUM
	CALL	PRINT

TO_DOWN_CONT:
	JMP	DOWN_CONT

BOTTOM:					;これ以上落ちられないとき
	CALL	TRUMP_PRINT
	MOV	BL,TRUMP_X
	MOV	BH,TRUMP_Y
	CALL	XY
	MOV	AL,TRUMP_MARK
	MOV	[DI],AL
	OR	BL,BL
	JZ	OVER_CHECK ;BOTTOM_2
	MOV	AH,TRUMP_NUM
	MOV	[DI-1],AH
BOTTOM_2:
	CALL	VANISH			;消去判定
OVER_CHECK:
	XOR	CX,CX
	LOOP	$
	MOV	BX,0200H
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNZ	END
	JMP	SET

;**************************************
;ゲームオーバー
;**************************************

END:
	CALL	NEXT			;NEXT消去用

	MOV	DL,21
END_LOOP:
	XOR	BH,BH
CLS_Y:
	XOR	BL,BL
CLS_X:
	CALL	PRINT
	INC	DI
	INC	BL
	CMP	BL,16
	JNZ	CLS_X
	INC	BH
	CMP	BH,5
	JNZ	CLS_Y
	MOV	CX,2000H
	LOOP	$
	INC	DL
	CMP	DL,27
	JNZ	END_LOOP

	MOV	BX,0105H
	MOV	DI,OFFSET MOJI_GAMEOVER
	CALL	MOJI_PRINT
END_CR_WAIT:
	CALL	POWEROFF_CHECK
	MOV	AX,0080H
	CALL	KEY
	AND	AH,02H
	JZ	END_CR_WAIT
	JMP	INIT

;**************************************
;消去判定
;**************************************

VANISH:
	XOR	AX,AX
	MOV	ES,AX
	MOV	DS,AX
	MOV	AL,DOWN_LIMIT
	SUB	AL,8
	CMP	BL,AL
	JG	VANISH_TATE
;VANISH_YOKO:				;横に5枚そろったとき
	CALL	XY
	MOV	SI,DI
	DEC	SI
	MOV	DI,OFFSET VANISH_TRUMP
	MOV	CX,10
VANISH_YOKO_LOOP:
	MOV	AL,[SI]
	MOV	[DI],AL
	MOV	BYTE PTR [SI],0
	INC	SI
	INC	DI
	LOOP	VANISH_YOKO_LOOP

	SAL	BL,1			;四角形の座標計算
	MOV	AL,BL
	SAL	BL,1
	ADD	BL,AL
	ADD	BL,5
	SAL	BH,1
	MOV	AL,BH
	SAL	BH,1
	ADD	BH,AL
	MOV	CX,BX
	ADD	CX,063CH
	JMP	VANISH_POSSIBLE

VANISH_TATE:
	MOV	SI,OFFSET VANISH_TRUMP
	MOV	BH,0

VANISH_TATE_1:
	CALL	XY
	MOV	DX,[DI-1]
	OR	DX,DX
	JZ	VANISH_IMP
	MOV	WORD PTR [SI],DX
	INC	SI
	INC	SI
	INC	BH
	CMP	BH,5
	JNZ	VANISH_TATE_1

	MOV	BH,0			;BRAMのトランプを消す
VANISH_TATE_2:
	CALL	XY
	MOV	WORD PTR [DI-1],0
	INC	BH
	CMP	BH,5
	JNZ	VANISH_TATE_2

	MOV	BH,TRUMP_Y		;四角形の座標計算
	SAL	BL,1
	MOV	AL,BL
	SAL	BL,1
	ADD	BL,AL
	ADD	BL,5
	XOR	BH,BH
	MOV	CX,BX
	ADD	CX,1E0CH
	JMP	VANISH_POSSIBLE

VANISH_IMP:
	RET

VANISH_POSSIBLE:
	PUSH	BX
	PUSH	CX

	MOV	CX,5
	MOV	SI,OFFSET VANISH_TRUMP	;消えたトランプの出現フラグを消す
VANISH_VANISH_LOOP:
	MOV	AL,[SI+1]
	CMP	AL,19
	JNZ	NOT_VANISH_JOKER
	MOV	BX,52
	JMP	VANISH_JOKER
NOT_VANISH_JOKER:
	SUB	AL,14
	MOV	DL,13
	MUL	DL
	XOR	DH,DH
	MOV	DL,[SI]
	DEC	DL
	ADD	AX,DX
	MOV	BX,AX
VANISH_JOKER:
	MOV	BYTE PTR [TRUMP_APPEAR+BX],0
	INC	SI
	INC	SI
	LOOP	VANISH_VANISH_LOOP

					
	MOV	SI,OFFSET VANISH_TRUMP	;ＪＯＫＥＲがあるかないかで場合分け
	MOV	BL,-1
JOKER_EXSIT:
	CMP	BYTE PTR [SI],18
	JNZ	NOT_JOKER_EXSIT
	MOV	BL,CL
NOT_JOKER_EXSIT:
	INC	SI
	INC	SI
	INC	CL
	CMP	CL,5
	JNZ	JOKER_EXSIT

	CMP	BL,-1
	JZ	NO_JOKER

	MOV	SI,OFFSET VANISH_TRUMP	;ＪＯＫＥＲがある時
	MOV	DH,0
	SAL	BL,1
	XOR	BH,BH
	MOV	AL,1
BEST_JOKER_1:
	MOV	AH,14
BEST_JOKER_2:
	MOV	[SI+BX],AX
	CALL	YAKU_CHECK
	CMP	DH,DL
	JA	BEST_JOKER_3
	MOV	DH,DL
BEST_JOKER_3:
	INC	AH
	CMP	AH,18
	JNZ	BEST_JOKER_2
	INC	AL
	CMP	AL,14
	JNZ	BEST_JOKER_1
	MOV	DL,DH			;一番良い結果
	JMP	CHECKED

NO_JOKER:
	CALL	YAKU_CHECK

CHECKED:
	XOR	DH,DH
	MOV	AX,DX
	SAL	DX,4
	SUB	DX,AX
	MOV	DI,OFFSET YAKU
	ADD	DI,DX
	MOV	AX,[DI]

	XOR	DX,DX
	ADD	SCORE2,AX
	ADC	SCORE1,DX
	MOV	CX,10000
	DIV	CX
	CMP	AX,1000
	JC	NOT_OVERFLOW
	MOV	DX,0098H
	MOV	AX,967FH
	MOV	SCORE1,DX
	MOV	SCORE2,AX
NOT_OVERFLOW:
	MOV	DX,SCORE1
	MOV	AX,SCORE2
	MOV	CX,10000
	DIV	CX
	CALL	SCORE_PRINT

	ADD	DI,3			;スコア部分をとばす
	MOV	BX,0214H
	CALL	MOJI_PRINT

	POP	CX
	POP	BX
	PUSH	DI
	MOV	AL,8
BOX_BOX:
	CALL	BOX
	PUSH	CX
	MOV	CX,7000H
	LOOP	$
	POP	CX
	DEC	AL
	JNZ	BOX_BOX

	MOV	DI,OFFSET MOJI_YAKU
	MOV	BX,0213H
	CALL	MOJI_PRINT

	CALL	GRAVITY

	POP	DI
	MOV	AL,[DI-1]
	CMP	AL,-1
	JNZ	NOT_OJAMA_UP

	DEC	BYTE PTR DOWN_LIMIT
OJAMA_UP:
	XOR	BH,BH
OJAMA_UP_Y_LOOP:
	MOV	BL,1
OJAMA_UP_X_LOOP:
	CALL	XY
	MOV	AL,[DI]
	MOV	[DI-1],AL
	INC	BL
	CMP	BL,16
	JNZ	OJAMA_UP_X_LOOP
	MOV	BYTE PTR [DI],27
	INC	BH
	CMP	BH,5
	JNZ	OJAMA_UP_Y_LOOP
	JMP	OJAMA_END

NOT_OJAMA_UP:
	CMP	AL,0
	JZ	OJAMA_END

OJAMA_DOWN:
	CMP	BYTE PTR DOWN_LIMIT,15
	JZ	OJAMA_END
	INC	BYTE PTR DOWN_LIMIT
	XOR	BH,BH
OJAMA_DOWN_Y_LOOP:
	MOV	BL,15
OJAMA_DOWN_X_LOOP:
	CALL	XY
	MOV	AH,[DI-1]
	MOV	[DI],AH
	DEC	BL
	JNZ	OJAMA_DOWN_X_LOOP
	MOV	BYTE PTR [DI-1],0
	INC	BH
	CMP	BH,5
	JNZ	OJAMA_DOWN_Y_LOOP
 	DEC	AL
	JNZ	OJAMA_DOWN

OJAMA_END:
	CALL	BRAM_PUT
	RET

;**************************************
;役を判定します
;**************************************

YAKU_CHECK:				;return DL=役の種類
	PUSHA
	XOR	AX,AX
	MOV	ES,AX
	MOV	DS,AX
	MOV	DI,OFFSET YAKU_WORK
	MOV	CX,9
	REP	STOSB

	MOV	CL,4			;フラッシュがあるか？
	MOV	SI,OFFSET VANISH_TRUMP
	INC	SI
	MOV	AL,[SI]
FRASH_CHECK_LOOP:
	INC	SI
	INC	SI
	CMP	AL,[SI]
	JNZ	NO_FRASH
	LOOP	FRASH_CHECK_LOOP
	MOV	BYTE PTR FRASH_FLAG,1
NO_FRASH:
	MOV	CL,5			;ストレートがあるか
	MOV	SI,OFFSET VANISH_TRUMP
STRAIGHT_CHECK_1:
	MOV	BL,4
	MOV	AL,[SI]			;ストレートの先頭数
STRAIGHT_CHECK_2:
	INC	AL			;ストレートにつながるやつ
	CMP	AL,14
	JNZ	NOT_K
	MOV	AL,1
NOT_K:
	MOV	CH,5
	MOV	DI,OFFSET VANISH_TRUMP
	XOR	AH,AH
STRAIGHT_CHECK_3:
	CMP	AL,[DI]
	JNZ	STRAIGHT_CHECK_4
	MOV	AH,1
STRAIGHT_CHECK_4:
	INC	DI
	INC	DI
	DEC	CH
	JNZ	STRAIGHT_CHECK_3
	CMP	AH,1
	JNZ	START_CHANGE
	DEC	BL
	JNZ	STRAIGHT_CHECK_2
	MOV	BYTE PTR STRAIGHT_FLAG,1
	CMP	AL,1
	JNZ	TO_PAIR_CHECK
	MOV	BYTE PTR ROYAL_FLAG,1
TO_PAIR_CHECK:
	JMP	PAIR_CHECK
START_CHANGE:
	INC	SI
	INC	SI
	LOOP	STRAIGHT_CHECK_1

PAIR_CHECK:				;ペアがあるか
	MOV	AL,1
PAIR_CHECK_1:
	MOV	SI,OFFSET VANISH_TRUMP
	MOV	AH,0
	MOV	CX,5
PAIR_CHECK_2:
	CMP	AL,[SI]
	JNZ	NOT_SAME
	INC	AH
NOT_SAME:
	INC	SI
	INC	SI
	LOOP	PAIR_CHECK_2
	MOV	BL,AH
	XOR	BH,BH
	INC	BYTE PTR [OFFSET NOCARD_FLAG+BX]
	INC	AL
	CMP	AL,14
	JNZ	PAIR_CHECK_1

	MOV	AL,ROYAL_FLAG
	MOV	AH,STRAIGHT_FLAG
	MOV	BL,FRASH_FLAG

	CMP	AL,1
	JNZ	NOT_ROYALS
	CMP	AH,1
	JNZ	NOT_ROYALS
	CMP	BL,1
	JNZ	ROYAL_STRAIGHT_NOT_FRASH
	MOV	DL,11			;ﾛｲﾔﾙｽﾄﾚｰﾄﾌﾗｯｼｭ
	JMP	YAKU_END
ROYAL_STRAIGHT_NOT_FRASH:
	MOV	DL,10			;ﾛｲﾔﾙｽﾄﾚｰﾄ
	JMP	YAKU_END
NOT_ROYALS:
	CMP	AH,1
	JNZ	NOT_STRAIGHTS
	CMP	BL,1
	JNZ	STRAIGHT_NOT_FRASH
	MOV	DL,9			;ｽﾄﾚｰﾄﾌﾗｯｼｭ
	JMP	YAKU_END
STRAIGHT_NOT_FRASH:
	MOV	DL,4			;ｽﾄﾚｰﾄ
	JMP	YAKU_END
NOT_STRAIGHTS:
	CMP	BL,1
	JNZ	NOT_STRAIGHTS_NOT_FRASH
	MOV	DL,5			;ﾌﾗｯｼｭ
	JMP	YAKU_END
NOT_STRAIGHTS_NOT_FRASH:
	CMP	BYTE PTR FIVECARD_FLAG,1
	JNZ	NOT_FIVECARD
	MOV	DL,8			;ﾌｧｲﾌﾞｶｰﾄﾞ
	JMP	YAKU_END
NOT_FIVECARD:
	CMP	BYTE PTR FOURCARD_FLAG,1
	JNZ	NOT_FOURCARD
	MOV	DL,7			;ﾌｫｰｶｰﾄﾞ
	JMP	YAKU_END
NOT_FOURCARD:
	CMP	BYTE PTR THREECARD_FLAG,1
	JNZ	NOT_THREECARD
	CMP	BYTE PTR TWOCARD_FLAG,1
	JNZ	NOT_FULLHOUSE
	MOV	DL,6			;ﾌﾙﾊｳｽ
	JMP	YAKU_END
NOT_FULLHOUSE:
	MOV	DL,3			;ｽﾘｰｶｰﾄﾞ
	JMP	YAKU_END
NOT_THREECARD:
	CMP	BYTE PTR TWOCARD_FLAG,2
	JNZ	NOT_TWOPAIR
	MOV	DL,2			;ﾂｰﾍﾟｱ
	JMP	YAKU_END
NOT_TWOPAIR:
	CMP	BYTE PTR TWOCARD_FLAG,1
	JNZ	NOT_ONEPAIR
	MOV	DL,1
	JMP	YAKU_END
NOT_ONEPAIR:
	MOV	DL,0
YAKU_END:
	MOV	NOCARD_FLAG,DL		;NOCARDFLAGが空いてたから
	POPA
	MOV	DL,NOCARD_FLAG
	RET

;**************************************
;重力が働きます
;**************************************

GRAVITY:
	XOR	BH,BH
GRAVITY_Y_LOOP:
	MOV	BL,1
GRAVITY_X_LOOP:
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNZ	GRAVITY_LOOP_END
	MOV	CL,BL
	XOR	CH,CH
GRAVITY_DOWN_LOOP:
	MOV	AL,[DI-1]
	MOV	[DI],AL
	DEC	DI
	LOOP	GRAVITY_DOWN_LOOP
	MOV	[DI],CL			;先頭を0にする。
GRAVITY_LOOP_END:
	INC	BL
	CMP	BL,16
	JNZ	GRAVITY_X_LOOP
	INC	BH
	CMP	BH,5
	JNZ	GRAVITY_Y_LOOP
	RET

;**************************************
;画面表示のサブルーチン
;**************************************

BRAM_PUT:
	MOV	DI,OFFSET BRAM
	XOR	BH,BH
BRAM_PUT_Y:
	XOR	BL,BL
BRAM_PUT_X:
	MOV	DL,[DI]
	CALL	PRINT
	INC	DI
	INC	BL
	CMP	BL,16
	JNZ	BRAM_PUT_X
	INC	BH
	CMP	BH,5
	JNZ	BRAM_PUT_Y
	RET

;**************************************
;スコア表示
;**************************************

SCORE_PRINT:
	MOV	BL,25
	MOV	BH,1
	PUSH	DX
	MOV	CL,100
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	AL,AH
	XOR	AH,AH
	MOV	CL,10
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	DL,AH
	CALL	SCORE_NUMBER
	POP	DX

	MOV	AX,DX
	XOR	DX,DX
	MOV	CX,1000
	DIV	CX
	XCHG	AX,DX
	CALL	SCORE_NUMBER
	MOV	CL,100
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	AL,AH
	XOR	AH,AH
	MOV	CL,10
	DIV	CL
	MOV	DL,AL
	CALL	SCORE_NUMBER
	MOV	DL,AH
	CALL	SCORE_NUMBER
	RET

SCORE_NUMBER:
	ADD	DL,48
	CALL	LCDC
	INC	BL
	RET

;**************************************
;NEXT表示ルーチン
;**************************************

NEXT:
	MOV	AL,NEXT_TRUMP_MARK
	MOV	TRUMP_MARK,AL
	MOV	AL,NEXT_TRUMP_NUM
	MOV	TRUMP_NUM,AL
	CALL	RND
	CMP	DL,250
	JNA	NEXT_1
	MOV	SI,OFFSET TRUMP_APPEAR
	ADD	SI,52
	CMP	BYTE PTR [SI],1
	JZ	NEXT_1
	MOV	AL,18
	MOV	DL,19
	JMP	NEXT_3

NEXT_1:
	CALL	RND			;数字の方を制作
	AND	DL,15
	INC	DL
	CMP	DL,13
	JA	NEXT_1
	MOV	AL,DL

	CALL	RND			;マークの方を制作
	AND	DL,3

D_CHECK:
	MOV	SI,OFFSET TRUMP_APPEAR
	PUSH	AX
	MOV	AL,13
	MUL	DL
	ADD	SI,AX
	POP	AX
	MOV	AH,0
	ADD	SI,AX
	DEC	SI
	CMP	BYTE PTR [SI],0
	JZ	NEXT_2

	INC	AL			;ダブっていたら一枚づつ次のものを探す
	CMP	AL,13
	JNA	D_CHECK
	MOV	AL,1
	INC	DL
	CMP	DL,3
	JNA	D_CHECK
	MOV	DL,0
	MOV	AL,1
	JMP	D_CHECK

NEXT_2:
	ADD	DL,14
NEXT_3:
	MOV	BYTE PTR [SI],1
	MOV	BYTE PTR NEXT_TRUMP_NUM,AL
	MOV	BYTE PTR NEXT_TRUMP_MARK,DL
	MOV	BL,-2
	MOV	BH,2
	MOV	DL,0
	CALL	PRINT
	INC	BL
	CALL	PRINT
	RET

;**************************************
;乱数発生
;**************************************

RND:
	PUSH	AX
	PUSH	BX
RNDDT:
	MOV	AX,02DBH
	MOV	BX,AX
	SAL	AX,1
	ADD	AX,BX
	ADD	AX,3575H
	MOV	WORD PTR [RNDDT+1],AX
	MOV	DL,BH
	POP	BX
	POP	AX
	RET

;**************************************
;１文字表示
;**************************************

PRINT:
	PUSHA
	PUSH	ES
	PUSH	DS
	ADD	BL,2
	XOR	DI,DI
	MOV	DS,DI
	MOV	AX,0A000H
	MOV	ES,AX
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	AND	AL,0FH
	ADD	AL,6
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	SAL	BH,1
	SAL 	AL,2
	ADD	AL,BH
	SAL	BL,1
	AND	BL,20H
	ADD	AL,BL
	INC	AL
	STOSB
	XOR	DH,DH
	SAL	DX,1
	MOV	CX,DX
	SAL	DX,1
	ADD	DX,CX
	ADD	DX,OFFSET TRUMP_FONT
	MOV	SI,DX
	MOV	CX,6
WRITE_S:
	MOV	AL,20H
	STOSB
WRITE_L:
	LODSB
	PUSH	BX
	POP	BX
	STOSB
	DEC	DI
	LOOP	WRITE_L
	POP	DS
	POP	ES
	POPA
	RET

LCDC:
	PUSHA
	PUSH	ES
	PUSH	DS
	XOR	AX,AX
	MOV	DS,AX
	MOV	AH,3AH
	INT	41H
	MOV	AX,ES
	MOV	DS,AX
	MOV	SI,DI
	SUB	DL,32
	XOR	DH,DH
	SHL	DX,3
	ADD	SI,DX
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	AND	AL,0FH
	ADD	AL,6
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	SHL	AL,3
	TEST	BL,10H
	JE	OK
	ADD	AL,20H
OK:
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CX,7
P_LP:
	LODSB
	PUSH	BX
	POP	BX
	STOSB
	DEC	DI
	LOOP	P_LP
	POP	DS
	POP	ES
	POPA
	RET

;**************************************
;仮想配列変数
;**************************************

XY:
	PUSH	AX
	PUSH	BX
	SHL	BH,4
	ADD	BL,BH
	XOR	BH,BH
	MOV	DI,BX
	MOV	AX,OFFSET BRAM
	ADD	DI,AX
	POP	BX
	POP	AX
	RET

;**************************************
;文字列表示
;**************************************

MOJI_PRINT:
	PUSHA
MOJI_PRINT_LOOP:
	MOV	DL,[DI]
	INC	DI
	OR	DL,DL
	JZ	MOJI_PRINT_END
	CALL	LCDC
	INC	BL
	JMP	SHORT MOJI_PRINT_LOOP
MOJI_PRINT_END:
	POPA
	RET

;**************************************
;キー入力チェック
;**************************************

CHK:
	MOV	CL,BYTE PTR KEY_REPEAT
	MOV	BYTE PTR DELTA_Y,0
	MOV	AX,0100H
	CALL	KEY
	AND	AX,0010H
	JZ	CHK_A
	INC	BYTE PTR KEY_REPEAT
	CMP	BYTE PTR KEY_REPEAT,50
	JC	CHK_A
	MOV	BYTE PTR KEY_REPEAT,0
	CMP	BYTE PTR TRUMP_Y,0
	JE	CHK_A
	MOV	BL,TRUMP_X
	CMP	BL,0
	JE	CHK_A
	MOV	BH,TRUMP_Y
	DEC	BH
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNE	CHK_A
	MOV	BYTE PTR DELTA_Y,-1
CHK_A:
	MOV	AX,0100H
	CALL	KEY
	AND	AX,0040H
	JZ	CHK_B
	INC	BYTE PTR KEY_REPEAT
	CMP	BYTE PTR KEY_REPEAT,50
	JC	CHK_B
	MOV	BYTE PTR KEY_REPEAT,0
	CMP	BYTE PTR TRUMP_Y,4
	JE	CHK_B
	MOV	BL,TRUMP_X
	CMP	BL,0
	JE	CHK_B
	MOV	BH,TRUMP_Y
	INC	BH
	CALL	XY
	CMP	BYTE PTR [DI],0
	JNE	CHK_B
	MOV	BYTE PTR DELTA_Y,1
CHK_B:
	MOV	AX,0200H
	CALL	KEY
	AND	AX,0040H
	JZ	CHK_C
	INC	BYTE PTR KEY_REPEAT
	CMP	BYTE PTR KEY_REPEAT,20
	JC	CHK_C
	MOV	BYTE PTR KEY_REPEAT,0
	MOV	WORD PTR DOWN_WAIT,0
CHK_C:
	CMP	CL,BYTE PTR KEY_REPEAT
	JNZ	CHK_D
	MOV	BYTE PTR KEY_REPEAT,0
CHK_D:
	RET

;**************************************
;キー入力のサブルーチン
;**************************************

POWEROFF_CHECK:
	MOV	AX,0001H
	CALL	KEY
	XOR	AL,AH
	TEST	AL,41H
	JZ	NOT_POWEROFF
	MOV	AH,7FH
	INT	41H
NOT_POWEROFF:
	RET

PAUSE_CHECK:
	MOV	AX,0040H
	CALL	KEY
	AND	AL,02H
	JZ	PAUSE_CHECK_END
WHILE_P_PUSHED:
	MOV	AX,0040H
	CALL	KEY
	AND	AL,02H
	JNZ	WHILE_P_PUSHED
UNTIL_CR_PUSH:
	CALL	POWEROFF_CHECK
	MOV	AX,0080H
	CALL	KEY
	AND	AH,02H
	JZ	UNTIL_CR_PUSH
PAUSE_CHECK_END:
	RET

KEY:
	MOV	DX,200H
	OUT	DX,AX
	CALL	K_WAIT
	MOV	DX,202H
	IN	AX,DX
	RET
K_WAIT:
	PUSH	CX
	MOV	CX,0009H
K_LOOP:
	LOOP	K_LOOP
	POP	CX
	RET

;**************************************
;トランプ表示サブ
;**************************************

TRUMP_PRINT:
	MOV	DL,TRUMP_MARK
	MOV	DH,TRUMP_NUM
	CALL	TRUMP_PRINT_MAIN
	RET
TRUMP_DISPRINT:
	XOR	DX,DX
	CALL	TRUMP_PRINT_MAIN
	RET

TRUMP_PRINT_MAIN:
	MOV	BL,TRUMP_X
	MOV	BH,TRUMP_Y
	CALL	PRINT
	CMP	BL,0
	JNZ	TRUMP_PRINT_0
	CMP	BH,2
	JNZ	TRUMP_PRINT_RET
TRUMP_PRINT_0:
	DEC	BL
	MOV	DL,DH
	CALL	PRINT
TRUMP_PRINT_RET:
	RET

;**************************************
;ＢＯＸサブ
;**************************************

BOX:
	PUSH	BX
	PUSH	CX
	INC	BH
	DEC	CH
	CALL	TATE
	XCHG	BL,CL
	CALL	TATE
	XCHG	BL,CL
	DEC	BH
	INC	CH
	CALL	YOKO
	XCHG	BH,CH
	CALL	YOKO
	XCHG	BH,CH
	POP	CX
	POP	BX
	RET

TATE:
	PUSH	BX
TATE_1:
	CALL	DOT
	CMP	BH,CH
	JE	TATE_E
	INC	BH
	JMP	TATE_1
TATE_E:
	POP	BX
	RET

YOKO:
	PUSHA
	PUSH	ES
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
BOX_LP:
	PUSH	BX
	PUSH	CX
LINE_FS:
	MOV	DH,03FH
	MOV	AH,BL
	MOV	AL,6
	CALL	WARI
	NEG	AH
	MOV	CH,AH
	PUSH	CX
	MOV	CL,AL
	SHR	DH,CL
	POP	CX
	MOV	AH,CL
	MOV	AL,6
	CALL	WARI
	MOV	CL,AL
	ADD	CH,AH
	AND	CH,CH
	JNZ	LINE_RD
	INC	CH
	JMP	LINE_RT2
LINE_MD:
	MOV	DH,03FH
LINE_LP:
	SUB	CH,1
	JNC	LINE_RD
	JMP	LINE_END
LINE_RD:
	PUSH	BX
	PUSH	CX
	CALL	LCDC_Z
	POP	CX
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AH,ES:[DI]
	PUSH	BX
	POP	BX
	PUSH	BX
	POP	BX
LINE_S:
	MOV	AH,ES:[DI]
	XOR	DH,AH
LINE_WT:
	DEC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AL,DH
	STOSB
	POP	BX
	ADD	BL,6
	CMP	CH,1
	JNE	LINE_MD
LINE_RT:
	MOV	DH,03FH
LINE_RT2:
	NEG	CL
	ADD	CL,5
	SHR	DH,CL
	SHL	DH,CL
	JMP	LINE_LP
LINE_END:
	POP	CX
	POP	BX

LINE_RET:
	POP	ES
	POPA
	RET

LCDC_Z:
	CMP	BL,96
	JC	LCDC_Z_1
	ADD	BH,32
LCDC_Z_1:
	MOV	AH,BL
	MOV	AL,6
	CALL	WARI
	MOV	CL,AL
	AND	AH,0FH
	ADD	AH,6
	MOV	BL,AH
	RET

DOT:
	PUSHA
	PUSH	ES
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
	CALL	LCDC_Z
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AH,ES:[DI]
	MOV	AL,20H
	SHR	AL,CL
	PUSH	BX
	POP	BX
	PUSH	BX
	POP	BX
	MOV	AH,ES:[DI]
	XOR	AH,AL
	DEC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,BL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,BH
	STOSB
	MOV	AL,20H
	STOSB
	MOV	AL,AH
	STOSB
	POP	ES
	POPA
	RET

WARI:
	PUSH	BX
	PUSH	CX
	XOR	BX,BX
	MOV	BL,AH
	MOV	CX,8
WARI_L:
	SAL	BX,1
	MOV	AH,BH
	SUB	AH,AL
	JC	WARI_S
	INC	BL
	MOV	BH,AH
WARI_S:
	LOOP	WARI_L
	MOV	AH,BL
	MOV	AL,BH
	POP	CX
	POP	BX
	RET

;**************************************
;各種データ
;**************************************

TRUMP_FONT:
	DB	000H,000H,000H,000H,000H,000H
	DB	01CH,022H,022H,03EH,022H,000H
	DB	03CH,002H,01CH,020H,03EH,000H
	DB	03CH,002H,01CH,002H,03CH,000H
	DB	00CH,014H,024H,03EH,004H,000H
	DB	03EH,020H,03CH,002H,03CH,000H
	DB	01CH,020H,03CH,022H,01CH,000H
	DB	03EH,022H,004H,008H,008H,000H
	DB	01CH,022H,01CH,022H,01CH,000H
	DB	01CH,022H,01EH,002H,01CH,000H
	DB	02EH,02AH,02AH,02AH,02EH,000H
	DB	00EH,004H,004H,024H,018H,000H
	DB	01CH,022H,02AH,024H,01AH,000H
	DB	026H,028H,030H,028H,026H,000H
	DB	008H,01CH,03EH,008H,01CH,000H
	DB	008H,01CH,03EH,01CH,008H,000H
	DB	01CH,02AH,03EH,008H,01CH,000H
	DB	036H,03EH,03EH,01CH,008H,000H
	DB	011H,020H,020H,024H,013H,000H
	DB	034H,022H,022H,022H,004H,000H
	DB	03DH,03DH,000H,02FH,02FH,000H
	DB	000H,000H,00CH,00CH,000H,000H
	DB	000H,00CH,012H,012H,00CH,000H
	DB	000H,01EH,012H,012H,01EH,000H
	DB	01EH,021H,021H,021H,021H,01EH
	DB	03FH,021H,021H,021H,021H,03FH
	DB	000H,000H,000H,000H,000H,000H
	DB	03EH,03EH,03EH,03EH,03EH,000H

TITLE_GRAPH:
    	DB  	000H,000H,000H,000H,000H,000H,001H,001H,003H
    	DB  	003H,006H,006H,00CH,00CH,018H,000H,000H,000H
    	DB  	000H,000H,07EH,063H,0C3H,0C3H,086H,08CH,0F1H
    	DB  	001H,003H,003H,006H,003H,003H,000H,000H,000H
    	DB  	000H,000H,00FH,019H,061H,061H,0C3H,0C3H,086H
    	DB  	086H,00DH,00DH,01BH,033H,0C6H,000H,000H,000H
    	DB  	000H,000H,018H,098H,0B1H,0B3H,06CH,06CH,0F0H
    	DB  	0F8H,098H,098H,019H,00DH,01BH,000H,000H,000H
    	DB  	000H,000H,06FH,0CCH,098H,018H,030H,030H,07FH
    	DB  	060H,0C0H,0C0H,080H,080H,0FDH,000H,000H,000H
    	DB  	000H,000H,0F7H,006H,00CH,00CH,018H,018H,03FH
    	DB  	033H,066H,063H,0C6H,0C3H,086H,000H,000H,000H
    	DB  	000H,000H,0E0H,030H,030H,030H,060H,0C0H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,001H,001H,006H
    	DB  	006H,00CH,00FH,030H,030H,061H,000H,000H,000H
    	DB  	000H,000H,030H,030H,0F1H,0F1H,0E3H,0E3H,066H
    	DB  	066H,0CCH,0CCH,0D8H,0CCH,08FH,000H,000H,000H
    	DB  	000H,000H,03CH,066H,086H,086H,000H,000H,000H
    	DB  	000H,000H,030H,061H,0C1H,003H,000H,000H,000H
    	DB  	000H,000H,07FH,00CH,018H,018H,030H,030H,060H
    	DB  	060H,0C0H,0C0H,080H,080H,003H,000H,000H,000H
    	DB  	000H,000H,08FH,006H,00CH,00CH,018H,018H,030H
    	DB  	030H,061H,061H,0C3H,0C1H,0C1H,000H,000H,000H
    	DB  	000H,000H,007H,00CH,030H,030H,061H,061H,0C3H
    	DB  	0C3H,086H,086H,00DH,099H,0E3H,000H,000H,000H
    	DB  	000H,000H,08CH,0CCH,0DCH,0DCH,0BCH,0BCH,06DH
    	DB  	06DH,0CFH,0CFH,08EH,08EH,00CH,000H,000H,000H
    	DB  	000H,000H,030H,030H,060H,060H,0C0H,0C0H,080H
    	DB  	080H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,001H
    	DB  	002H,002H,00FH,004H,004H,008H,01EH,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,0C0H
    	DB  	000H,000H,09DH,024H,024H,029H,033H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,0F0H,0C0H,080H,000H,080H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,00FH
    	DB  	004H,005H,007H,00AH,008H,008H,038H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,0BFH
    	DB  	014H,01CH,019H,010H,038H,048H,0F8H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,001H
    	DB  	002H,002H,0FBH,004H,004H,004H,007H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,0E7H
    	DB  	028H,028H,0C9H,04FH,041H,08AH,01CH,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,00CH
    	DB  	0B2H,0A2H,0A4H,044H,044H,049H,073H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,0F8H
    	DB  	048H,048H,070H,080H,080H,000H,080H,000H,000H

YAKU:
	DW	0
	DB	-1,'    ﾌﾞﾀ    ',0
	DW	10
	DB	-1,'   ﾜﾝﾍﾟｱ   ',0
	DW	30
	DB	 0,'   ﾂｰﾍﾟｱ   ',0
	DW	50
	DB	 0,'  ｽﾘｰｶｰﾄﾞ  ',0
	DW	70
	DB	 1,'   ｽﾄﾚｰﾄ   ',0
	DW	0
	DB	 0,'   ﾌﾗｯｼｭ   ',0
	DW	80
	DB	 1,'   ﾌﾙﾊｳｽ   ',0
	DW	130
	DB	 2,'  ﾌｫｰｶｰﾄﾞ  ',0
	DW	170
	DB	 2,' ﾌｧｲﾌﾞｶｰﾄﾞ ',0
	DW	250
	DB	 3,'ｽﾄﾚｰﾄ ﾌﾗｯｼｭ',0
	DW	400
	DB	 4,' ﾛｲﾔﾙｽﾄﾚｰﾄ ',0
	DW	600
	DB	 5,'Rｽﾄﾚｰﾄﾌﾗｯｼｭ',0

MOJI_PUSH_SPACE_KEY	DB	'PUSH SPACE KEY',0
MOJI_SCORE		DB	'SCORE:',0
MOJI_YAKU		DB	'[           ]',0
MOJI_GAMEOVER		DB	'GAME OVER',0

;**************************************
;ワークエリア
;**************************************

TRUMP_X			DB	1 DUP(?)
TRUMP_Y			DB	1 DUP(?)
KEY_REPEAT		DB	1 DUP(?)
TRUMP_MARK		DB	1 DUP(?)
TRUMP_NUM		DB	1 DUP(?)
NEXT_TRUMP_MARK		DB	1 DUP(?)
NEXT_TRUMP_NUM		DB	1 DUP(?)
BRAM			DB	80 DUP(?)
DOWN_WAIT		DW	1 DUP(?)
DOWN_WAIT_COUNT		DW	1 DUP(?)
DELTA_Y			DB	1 DUP(?)
SCORE1			DW	1 DUP(?)
SCORE2			DW	1 DUP(?)
DOWN_LIMIT		DB	1 DUP(?)
TRUMP_APPEAR		DB	53 DUP(?)
VANISH_TRUMP		DB	10 DUP(?)

YAKU_WORK:
FRASH_FLAG		DB	1 DUP(?)
STRAIGHT_FLAG		DB	1 DUP(?)
ROYAL_FLAG		DB	1 DUP(?)
NOCARD_FLAG		DB	1 DUP(?)
ONECARD_FLAG		DB	1 DUP(?)
TWOCARD_FLAG		DB	1 DUP(?)
THREECARD_FLAG		DB	1 DUP(?)
FOURCARD_FLAG		DB	1 DUP(?)
FIVECARD_FLAG		DB	1 DUP(?)

CODE	ENDS
	END	START
