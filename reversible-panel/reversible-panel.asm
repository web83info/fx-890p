;******************************************************************************
;Ｒｅｖｅｒｓｉｂｌｅ　Ｐａｎｅｌ
;						1997 Copyright by ABCP software
;******************************************************************************

	.186
CODE	SEGMENT
	ASSUME	CS:CODE,DS:CODE,SS:CODE,ES:CODE

	ORG	0100H
START:
	ORG	2000H

;**************************************
;初期設定
;**************************************

	CLD
	XOR	AX,AX
	MOV	DS,AX
	MOV	ES,AX

	MOV	BYTE PTR X_SIZE,10
	MOV	BYTE PTR GAMEMODE,0
	MOV	BYTE PTR SHUFFLE,10

	PUSH	ES
	MOV	AH,3AH			;ＲＯＭフォントアドレスを求める。
	INT	41H
	MOV	SI,OFFSET FONT
	MOV	[SI],DI
	MOV	AX,ES
	MOV	[SI+2],AX
	POP	ES

;**************************************
;タイトル表示
;**************************************

TITLE:
	CALL	CLS
	MOV	BL,24
	MOV	SI,OFFSET TITLE_GRAPH
	MOV	DI,0631H
TITLE_LOGO:
	MOV	CX,22
	REP	MOVSB
	ADD	DI,10
	DEC	BL
	JNZ	TITLE_LOGO
	MOV	DI,OFFSET MOJI_START
	MOV	AX,0305H
	CALL	ROMMOJI
	CALL	VRAM2LCD

TITLE_LOOP:
	CALL	RND
	CALL	KEY_KEY			;ＢＲＫ＆電源チェック用
	MOV	AX,0020H
	MOV	BX,0004H
	CALL	KEY
	JNZ	OPTION			;[O]が押されていたらオプション
	MOV	AX,0010H
	MOV	BX,0080H
	CALL	KEY
	JZ	TITLE_LOOP		;スペースが押されていなかったらループ
	JMP	INIT

;**************************************
;オプション
;**************************************

OPTION:
	CALL	CLS
	MOV	AX,000AH
	MOV	DI,OFFSET MOJI_CUSTOM
	CALL	ROMMOJI
	MOV	AX,0108H
	MOV	DI,OFFSET MOJI_FIELDX
	CALL	ROMMOJI
	INC	AH
	MOV	DI,OFFSET MOJI_GAMEMODE
	CALL	ROMMOJI
	INC	AH
	MOV	DI,OFFSET MOJI_SHUFFLE
	CALL	ROMMOJI
	MOV	AX,0107H
	MOV	DL,62
	CALL	ONEMOJI 		;カーソル表示
	CALL	SHOW_GAMEMODE
	CALL	VRAM2LCD
CUSTOM_L:
	PUSH	AX
	MOV	AX,0080H
	MOV	BX,0200H
	CALL	KEY
	POP	AX
	JZ	CUS_C
	JMP	INIT
CUS_C:
	MOV	BX,AX
	CALL	KEY_KEY
	SHR	DH,1			;2
	JNC	CUSTOM_1
	CMP	AH,3
	JZ	CUSTOM_C
	CMP	AH,2
	JZ	CUSTOM_B
;CUSTOM_A:
	CMP	BYTE PTR X_SIZE,6	;横のマス数の最低値
	JZ	CUSTOM_1
	DEC	BYTE PTR X_SIZE
	JMP	SHORT CUSTOM_1
CUSTOM_B:
	CMP	BYTE PTR GAMEMODE,0	;ゲームモードの最低値
	JZ	CUSTOM_1
	DEC	BYTE PTR GAMEMODE
	CALL	SHOW_GAMEMODE
	JMP	SHORT CUSTOM_1
CUSTOM_C:
	PUSH	AX
	MOV	AL,X_SIZE
	CMP	SHUFFLE,AL		;チェンジ回数の最低値
	POP	AX
	JNA	CUSTOM_1
	DEC	BYTE PTR SHUFFLE
CUSTOM_1:
	SHR	DH,1			;4
	JNC	CUSTOM_2
	CMP	AH,3
	JZ	CUSTOM_F
	CMP	AH,2
	JZ	CUSTOM_E
;CUSTOM_D:
	CMP	BYTE PTR X_SIZE,20	;横のマス数の最大値
	JZ	CUSTOM_2
	INC	BYTE PTR X_SIZE
	JMP	SHORT CUSTOM_2
CUSTOM_E:
	CMP	BYTE PTR GAMEMODE,5	;ゲームモードの最大値
	JZ	CUSTOM_2
	INC	BYTE PTR GAMEMODE
	CALL	SHOW_GAMEMODE
	JMP	SHORT CUSTOM_2
CUSTOM_F:
	CMP	BYTE PTR SHUFFLE,255
	JZ	CUSTOM_2
	INC	BYTE PTR SHUFFLE
CUSTOM_2:
	SHR	DH,1			;8
	JNC	CUSTOM_3
	CMP	AH,1
	JZ	CUSTOM_3
	DEC	AH
CUSTOM_3:
	SHR	DH,1			;2
	JNC	CUSTOM_4
	CMP	AH,3
	JZ	CUSTOM_4
	INC	AH
CUSTOM_4:				;カーソル表示
	CMP	AX,BX
	JZ	CUSTOM_5		;カーソルの点滅防止
	PUSH	AX
	MOV	AX,BX
	MOV	DL,32
	CALL	ONEMOJI			;前の座標のカーソルを消して
	POP	AX
	MOV	DL,62
	CALL	ONEMOJI			;今の座標のカーソルを書く
CUSTOM_5:				;範囲の確認
	PUSH	AX
	MOV	AL,X_SIZE
	CMP	SHUFFLE,AL
	JA	CUSTOM_6
	MOV	SHUFFLE,AL
CUSTOM_6:
	XOR	CX,CX
	MOV	AX,0118H
	MOV	CL,X_SIZE
	CALL	NUMBER
	MOV	AX,0219H
	MOV	DL,GAMEMODE
	ADD	DL,65
	CALL	ONEMOJI
	MOV	AX,0318H
	MOV	CL,SHUFFLE
	CALL	NUMBER
	POP	AX
	CALL	VRAM2LCD
	MOV	CX,800
	LOOP	$
	JMP	CUSTOM_L

;**************************************
;初期化
;**************************************

INIT:
	CALL	CLS
	XOR	AX,AX
	MOV	ES,AX
	MOV	DS,AX
	MOV	DI,OFFSET FIELD
	MOV	CX,120
	XOR	AX,AX
	REP	STOSB

	MOV	AL,X_SIZE
	DEC	AL
	MOV	DEC_X_SIZE,AL

	MOV	AL,20
	SUB	AL,X_SIZE
	SHR	AL,1
	MOV	X_SIZE_OFFSET,AL

	XOR	AX,AX
	MOV	STEP_BACK_OFFSET,AL
	MOV	CURSOR_X,AL
	MOV	CURSOR_Y,AL
	MOV	K_REPEAT,AL
	MOV	LASTKEY,AL
	MOV	STEP,AX

	XOR	CH,CH
	MOV	CL,SHUFFLE
MAKE_QUESTION:
	CALL	RND
	MOV	BL,DL
	AND	BL,31
	CMP	BL,DEC_X_SIZE
	JA	MAKE_QUESTION
MAKE_QUESTION2:
	CALL	RND
	MOV	BH,DL
	AND	BH,7
	CMP	BH,5
	JA	MAKE_QUESTION2

	PUSH	CX
	MOV	SI,OFFSET VECTOR_OFFSET
	XOR	AH,AH
	MOV	AL,GAMEMODE
	SAL	AL,1
	ADD	SI,AX
	MOV	SI,[SI]
QUESTION_LOOP:
	MOV	CL,[SI]
	INC	SI
	MOV	CH,[SI]
	INC	SI
	CMP	CX,08080H
	JZ	QUESTION_END
	MOV	AX,BX
	ADD	AL,CL
	ADD	AH,CH
	CMP	AL,DEC_X_SIZE
	JA	QUESTION_LOOP
	CMP	AH,5
	JA	QUESTION_LOOP
	CALL	XY
	NEG	BYTE PTR [DI]
	INC	BYTE PTR [DI]
	JMP	SHORT QUESTION_LOOP
QUESTION_END:
	POP	CX
	LOOP	MAKE_QUESTION
	MOV	AX,0111H
	MOV	DI,OFFSET MOJI_REVERSIBLE
	CALL	ROMMOJI
	MOV	AX,0213H
	MOV	DI,OFFSET MOJI_STEP
	CALL	ROMMOJI
	CALL	BRAMPUT

MAIN:
	CALL	RND
	MOV	BL,CURSOR_X
	MOV	BH,CURSOR_Y
	CALL	CURSOR_PRINT

	CALL	KEY_KEY

	XOR	AX,AX
	SHR	DH,1
	JNC	DELTA_1
	CMP	BL,0
	JZ	DELTA_1
	DEC	AL
DELTA_1:
	SHR	DH,1
	JNC	DELTA_2
	CMP	BL,DEC_X_SIZE
	JZ	DELTA_2
	INC	AL
DELTA_2:
	SHR	DH,1
	JNC	DELTA_3
	CMP	BH,0
	JZ	DELTA_3
	DEC	AH
DELTA_3:
	SHR	DH,1
	JNC	DELTA_4
	CMP	BH,5
	JZ	DELTA_4
	INC	AH
DELTA_4:
	MOV	KEY_YOU_HIT,DH
	OR	AX,AX
	JZ	NO_CURSOR_MOVE
CURSOR_MOVED:
	ADD	BL,AL
	ADD	BH,AH
	CALL	BRAMPUT
	MOV	CURSOR_X,BL
	MOV	CURSOR_Y,BH
	CALL	CURSOR_PRINT
NO_CURSOR_MOVE:

CHECK_REVERSE:

	SHR	BYTE PTR KEY_YOU_HIT,1	;S
	JC	REVERSE_START
	JMP	CHECK_BS

REVERSE_START:
	MOV	BL,BYTE PTR CURSOR_X
	MOV	BH,BYTE PTR CURSOR_Y

REVERSE:
	CMP	WORD PTR STEP,999
	JNZ	REVERSE_A
	JMP	CHECK_BS
REVERSE_A:
	MOV	AL,STEP_BACK_OFFSET
	CMP	AL,255
	JNZ	REVERSE_MEMORY
					;スタックの破棄
	MOV	SI,OFFSET STEP_BACK
	MOV	DI,SI
	INC	SI
	MOV	CX,254
	REP	MOVSB
	DEC	BYTE PTR STEP_BACK_OFFSET

REVERSE_MEMORY:
	XOR	AH,AH
	MOV	AL,STEP_BACK_OFFSET
	MOV	SI,OFFSET STEP_BACK
	ADD	SI,AX
	MOV	AL,BL
	SAL	AL,3			;8倍
	OR	AL,BH
	MOV	BYTE PTR [SI],AL	;00XX XYYY(2)
	INC	BYTE PTR STEP_BACK_OFFSET
	INC	WORD PTR STEP

REVERSE_MAIN:
	MOV	SI,OFFSET VECTOR_OFFSET
	XOR	AH,AH
	MOV	AL,GAMEMODE
	SAL	AL,1
	ADD	SI,AX
	MOV	SI,[SI]
REVERSE_LOOP:
	MOV	CL,[SI]
	INC	SI
	MOV	CH,[SI]
	INC	SI
	CMP	CX,08080H
	JZ	REVERSE_END
	MOV	AX,BX
	ADD	AL,CL
	ADD	AH,CH
	CMP	AL,DEC_X_SIZE
	JA	REVERSE_LOOP
	CMP	AH,5
	JA	REVERSE_LOOP
	CALL	XY
	NEG	BYTE PTR [DI]
	INC	BYTE PTR [DI]
	JMP	SHORT REVERSE_LOOP
REVERSE_END:
	CALL	BRAMPUT

	MOV	DI,OFFSET FIELD
	MOV	CX,120
CHECK_CLEAR_LOOP:
	CMP	BYTE PTR [DI],0
	JNZ	CHECK_CLEAR_LOOP_OUT
	INC	DI
	LOOP	CHECK_CLEAR_LOOP
CHECK_CLEAR_LOOP_OUT:
	JCXZ	TO_CLEAR
NOT_CLEAR:
	JMP	SHORT CHECK_GIVE_UP
TO_CLEAR:
	JMP	SHORT CLEAR

CHECK_BS:
	SHR	BYTE PTR KEY_YOU_HIT,1
	JNC	STEP_BACK_IMP

BS:
	CMP	BYTE PTR STEP_BACK_OFFSET,0
	JZ	STEP_BACK_IMP
	DEC	BYTE PTR STEP_BACK_OFFSET
	DEC	WORD PTR STEP
	MOV	AL,STEP_BACK_OFFSET
	XOR	AH,AH
	MOV	SI,OFFSET STEP_BACK
	ADD	SI,AX
	MOV	AL,[SI]
	MOV	CL,8
	DIV	CL	;AX/CL=AL...AH
	MOV	BX,AX
	JMP	REVERSE_MAIN
STEP_BACK_IMP:

CHECK_GIVE_UP:

	MOV	AX,0008H
	MOV	BX,0010H
	CALL	KEY
	JNZ	OVER

TO_MAIN:
	JMP	MAIN

;**************************************
;終了処理
;**************************************

OVER:
	MOV	SI,OFFSET G_OVER
	MOV	DI,69BH
	MOV	BL,6
OVER_1:
	MOV	CX,9
	REP	MOVSB
	ADD	DI,23
	DEC	BL
	JNZ	OVER_1
	JMP	SHORT END

CLEAR:
	MOV	SI,OFFSET G_CLEAR
	MOV	DI,69BH
	MOV	BL,6
CLEAR_1:
	MOV	CX,9
	REP	MOVSB
	ADD	DI,23
	DEC	BL
	JNZ	CLEAR_1

END:
	CALL	VRAM2LCD
END_:
	CALL	KEY_KEY
	MOV	AX,0400H		;[CLS]
	MOV	BX,0010H
	CALL	KEY
	JNZ	TO_TITLE

	MOV	AX,0080H		;[RET]
	MOV	BX,0200H
	CALL	KEY
	JZ	END_
	JMP	INIT

TO_TITLE:
	JMP	TITLE

;**************************************
;サブルーチンの大群
;**************************************

SHOW_GAMEMODE:
	PUSHA
	MOV	AH,1
SHOW_GAMEMODE_1:
	MOV	AL,0
SHOW_GAMEMODE_2:
	MOV	DL,0
	CALL	WRITECHR
	INC	AL
	CMP	AL,5
	JNZ	SHOW_GAMEMODE_2
	INC	AH
	CMP	AH,6
	JNZ	SHOW_GAMEMODE_1

	MOV	SI,OFFSET VECTOR_OFFSET
	XOR	AH,AH
	MOV	AL,GAMEMODE
	SAL	AL,1
	ADD	SI,AX
	MOV	SI,[SI]
SHOW_LOOP:
	MOV	AX,0302H
	MOV	CL,[SI]
	INC	SI
	MOV	CH,[SI]
	INC	SI
	CMP	CX,08080H
	JZ	SHOW_END
	ADD	AL,CL
	ADD	AH,CH
	MOV	DL,1
	CALL	WRITECHR
	JMP	SHORT SHOW_LOOP
SHOW_END:
	POPA
	RET

CURSOR_PRINT:
	PUSHA
	MOV	AL,CURSOR_X
	MOV	AH,CURSOR_Y
	CALL	XY
	MOV	DL,[DI]
	ADD	DL,2
	PUSH	AX
	ADD	AL,X_SIZE_OFFSET
	CALL	WRITECHR
	POP	AX
	CALL	VRAM2LCD
	POPA
	RET

NUMBER: 				;数字の表示（１バイト）
	PUSHA
;	CMP	CX,08000H
;	JC	NUMBER1
;	NEG	CX
;NUMBER1:
	MOV	BX,100
	CALL	WARI16
	CALL	ONEMOJI
	INC	AL
	MOV	BX,10
	CALL	WARI16
	CALL	ONEMOJI
	INC	AL
	MOV	BX,1
	CALL	WARI16
	CALL	ONEMOJI
	POPA
	RET

WARI16: 				;数字表示用割り算
	XOR	DL,DL
WARI16C:
	SUB	CX,BX
	JC	WARI16E
	INC	DL
	JMP	SHORT WARI16C
WARI16E:
	ADD	CX,BX
	ADD	DL,48
	RET

ONEMOJI:				;ＲＯＭ文字の１文字表示
	PUSHA
	PUSH	ES
	XCHG	AL,AH
	MOV	BX,AX
	SAL	BH,1
	SAL	AH,2
	ADD	AH,BH			;6倍
	MOV	AL,8
	CALL	WARI
	MOV	CL,AL
	MOV	SI,0630H
	MOV	AL,AH
	XOR	AH,AH
	SAL	AX,5
	ADD	SI,AX
	XOR	BH,BH
	SAL	BX,3
	ADD	SI,BX
	SUB	DL,32
	MOV	BX,OFFSET FONT
	MOV	DI,[BX]
	MOV	AX,[BX+2]
	MOV	ES,AX
	XOR	DH,DH
	SAL	DX,3
	ADD	DI,DX
	MOV	AH,8
OM_L:
	MOV	DH,ES:[DI]
	SAL	DH,2
	INC	DI
	XOR	DL,DL
	MOV	BX,0FC00H
	SHR	BX,CL
	SHR	DX,CL
	NOT	BX
	AND	[SI],BH
	AND	[SI+20H],BL
	OR	[SI],DH
	OR	[SI+20H],DL
	INC	SI
	DEC	AH
	JNZ	OM_L
	POP	ES
	POPA
	RET

ROMMOJI:				;ＲＯＭ文字の表示
	PUSHA
ROMMOJIL:
	MOV	DL,[DI]
	INC	DI
	CMP	DL,0
	JZ	ROMMOJIE
	CALL	ONEMOJI
	INC	AL
	JMP	SHORT ROMMOJIL
ROMMOJIE:
	POPA
	RET

CLS:					;画面クリア
	XOR	AX,AX
	MOV	ES,AX
	MOV	DI,630H
	MOV	CX,1024
	REP	STOSB
	CALL	VRAM2LCD
	RET

BRAMPUT:
	PUSH	AX
	PUSH	DI
	PUSH	CX
	MOV	AH,0
BRAMPUT_1:
	MOV	AL,0
BRAMPUT_2:
	CALL	XY
	MOV	DL,[DI]
	PUSH	AX
	ADD	AL,X_SIZE_OFFSET
	CALL	WRITECHR
	POP	AX
	INC	AL
	CMP	AL,X_SIZE
	JNZ	BRAMPUT_2
	INC	AH
	CMP	AH,6
	JNZ	BRAMPUT_1
	MOV	CX,STEP
	MOV	AX,0219H
	CALL	NUMBER
	POP	CX
	POP	DI
	POP	AX
	CALL	VRAM2LCD
	RET

WRITECHR:				;5*5キャラの表示
		;AL,AH=X,Y
		;DL=NUM
	PUSHA
	XCHG	AL,AH
	MOV	BX,AX
	SAL	AH,2
	ADD	AH,BH			;5倍
	MOV	AL,8
	CALL	WARI
	MOV	CL,AL
	MOV	SI,0630H
	MOV	AL,AH
	XOR	AH,AH
	SAL	AX,5
	ADD	SI,AX
	XOR	BH,BH
	ADD	SI,BX
	SAL	BX,2
	ADD	SI,BX
	INC	SI

	MOV	DH,DL
	SAL	DL,2
	ADD	DL,DH			;5倍
	MOV	DI,OFFSET CHR5
	XOR	DH,DH
	ADD	DI,DX
	MOV	AH,5
W_C_L:
	MOV	DH,[DI]
	INC	DI
	XOR	DL,DL
	MOV	BX,0F800H
	SHR	BX,CL
	SHR	DX,CL
	NOT	BX
	AND	[SI],BH
	AND	[SI+20H],BL
	OR	[SI],DH
	OR	[SI+20H],DL
	INC	SI
	DEC	AH
	JNZ	W_C_L
	POPA
	RET

XY:					;仮想配列変数
	PUSH	AX
	PUSH	BX
	XCHG	AL,AH
	MOV	DI,OFFSET FIELD
	XOR	BH,BH
	MOV	BL,AH
	MUL	BYTE PTR X_SIZE	;AX=AL*(X)
	ADD	DI,AX			;Y座標分
	ADD	DI,BX			;X座標分
	POP	BX
	POP	AX
	RET

RND:					;乱数を発生する
	PUSH	AX
	PUSH	BX
	PUSH	CX
	DB	0B9H			;CX=?
RNDDT:
	DW	12DBH
	MOV	BH,CH
	MOV	BL,CL
	SAL	BX,1
	ADD	CX,BX
	MOV	DL,CL
	ADD	DL,CH
	MOV	CH,DL
	ADD	CX,0038H
	MOV	WORD PTR RNDDT,CX
	MOV	DL,CH
	POP	CX
	POP	BX
	POP	AX
	RET

VRAM2LCD:				;VRAMをLCDに表示
	PUSH	ES
	PUSHA
	MOV	SI,630H
	MOV	AX,0A000H
	MOV	ES,AX
	XOR	DI,DI
	MOV	AL,23H
	STOSB
	MOV	AL,35H
	STOSB
	MOV	AL,21H
	STOSB
	MOV	AL,4
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,0
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CX,32
V2L_0:
	LODSB
	SHR	AL,4
	STOSB
	INC	DI
	LOOP	V2L_0
	MOV	DL,5
V2L_1:
	INC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,0
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CX,32
V2L_2:
	MOV	AH,[SI-20H]
	LODSB
	SHR	AX,4
	STOSB
	INC	DI
	LOOP	V2L_2
	INC	DL
	CMP	DL,17
	JNZ	V2L_1
	SUB	SI,32
	MOV	DL,4
V2L_3:
	INC	DI
	MOV	AL,21H
	STOSB
	MOV	AL,DL
	STOSB
	MOV	AL,22H
	STOSB
	MOV	AL,32
	STOSB
	MOV	AL,20H
	STOSB
	MOV	CX,32
V2L_4:
	MOV	AH,[SI-20H]
	LODSB
	SHR	AX,4
	STOSB
	INC	DI
	LOOP	V2L_4
	INC	DL
	CMP	DL,17
	JNZ	V2L_3
	INC	DI
	MOV	AL,23H
	STOSB
	MOV	AL,75H
	STOSB
	POPA
	POP	ES
	RET

WARI:					;AH/AL=AH...AL
	PUSH	BX
	PUSH	CX
	XOR	BX,BX
	MOV	BL,AH
	MOV	CX,8
WARI_L:
	SAL	BX,1
	MOV	AH,BH
	SUB	AH,AL
	JC	WARI_S
	INC	BL
	MOV	BH,AH
WARI_S:
	LOOP	WARI_L
	MOV	AH,BL
	MOV	AL,BH
	POP	CX
	POP	BX
	RET

KEY_KEY:				;キー入力
	PUSH	AX
	PUSH	BX
	MOV	AX,1
	MOV	BX,0FFFFH		;どのビットも殺さない
	CALL	KEY
	XOR	AL,AH
	TEST	AL,41H
	JZ	KEY_K
	MOV	AH,7FH			;電源を切る
	INT	41H
KEY_K:
	XOR	DH,DH
	MOV	DI,OFFSET K_DAT
	MOV	CX,2
KEY_KL:
	SAL	DH,1
	MOV	AX,[DI]
	MOV	BX,[DI+2]
	ADD	DI,4
	CALL	KEY
	JZ	KEY_K1			;そのキーが押されていないとき
	OR	DH,1
KEY_K1:
	LOOP	KEY_KL
	MOV	CL,4
KEY_KL2:
	SAL	DH,1
	MOV	AX,[DI]
	MOV	BX,[DI+2]
	ADD	DI,4
	CALL	KEY
	JZ	KEY_K2			;そのキーが押されていないとき
	CMP	DH,0
	JNZ	KEY_K2			;他のキーが押されているとき
	OR	DH,1
KEY_K2:
	LOOP	KEY_KL2
	MOV	AL,LASTKEY
	TEST	AL,070H 		;前回BS,Sを押してなかったら
	JZ	REPEAT_1
	MOV	LASTKEY,DH
	AND	DH,0FH			;BS,Sのﾘﾋﾟｰﾄ禁止
	JMP	SHORT REPEAT_F
REPEAT_1:
	AND	AL,0FH			;前回テンキーを押していなかったら
	JZ	REPEAT_3
	TEST	DH,AL			;前回と同じキーを押していなかったら
	JZ	REPEAT_R
	INC	BYTE PTR K_REPEAT
	JMP	SHORT REPEAT_2
REPEAT_R:
	MOV	BYTE PTR K_REPEAT,0
	JMP	SHORT REPEAT_3
REPEAT_2:
	CMP	BYTE PTR K_REPEAT,0	;最初は反応
	JE	REPEAT_3
	DB	080H,03EH
	DW	OFFSET K_REPEAT
K_R:
	DB	9			;CMP BYTE PTR K_REPEAT,x
	JNC	REPEAT_4
	MOV	LASTKEY,DH
	AND	DH,30H
	JMP	SHORT REPEAT_F
REPEAT_4:
	DEC	BYTE PTR K_REPEAT
REPEAT_3:
	MOV	LASTKEY,DH
REPEAT_F:
	POP	BX
	POP	AX
	RET

KEY:					;キー入力
	PUSH	DX
	MOV	DX,200H
	OUT	DX,AX
	PUSH	AX
	POP	AX
	MOV	DL,2
	IN	AX,DX
	AND	AX,BX
	POP	DX
	RET


;**************************************
;データ
;**************************************

MOJI_REVERSIBLE:
	DB	'ReversiblePanel',0
MOJI_STEP:
	DB	'STEP:[   ]',0
MOJI_START:
	DB	'[SPC]:Start [O]:Option',0
MOJI_CUSTOM:
	DB	'Custom Mode',0
MOJI_FIELDX:
	DB	'Field X Size   [   ]',0
MOJI_GAMEMODE:
	DB	'Game Mode      [   ]',0
MOJI_SHUFFLE:
	DB	'Shuffle        [   ]',0
CHR5:
	DB	000H,000H,020H,000H,000H	;白マス
	DB	0F8H,0F8H,0D8H,0F8H,0F8H	;黒マス
	DB	0F8H,088H,0A8H,088H,0F8H	;カーソル（白マスの上）
	DB	000H,070H,050H,070H,000H	;カーソル（黒マスの上）

VECTOR_OFFSET:
	DW	OFFSET VECTOR_0
	DW	OFFSET VECTOR_1
	DW	OFFSET VECTOR_2
	DW	OFFSET VECTOR_3
	DW	OFFSET VECTOR_4
	DW	OFFSET VECTOR_5

VECTOR_0:
	DB	0,0,0,1,0,-1,1,0,-1,0
	DB	1,1,1,-1,-1,1,-1,-1
	DB	0,2,0,-2,2,0,-2,0,80H,80H
VECTOR_1:
	DB	0,1,0,-1,1,0,-1,0
	DB	1,1,1,-1,-1,1,-1,-1
	DB	0,2,0,-2,2,0,-2,0,80H,80H
VECTOR_2:
	DB	0,0
	DB	1,1,1,-1,-1,1,-1,-1
	DB	0,2,0,-2,2,0,-2,0,80H,80H
VECTOR_3:
	DB	1,1,1,-1,-1,1,-1,-1
	DB	0,2,0,-2,2,0,-2,0,80H,80H
VECTOR_4:
	DB	0,0,0,1,0,-1,1,0,-1,0,80H,80H
VECTOR_5:
	DB	0,1,0,-1,1,0,-1,0,80H,80H

K_DAT:
	DW	0200H,0200H
	DW	0004H,0008H
	DW	0100H,0040H
	DW	0100H,0010H
	DW	0200H,0040H
	DW	0080H,0020H

G_CLEAR:
	DB	0FFH,080H,087H,088H,087H,080H,08FH,080H,0FFH
	DB	0FFH,000H,0A2H,022H,022H,0A2H,01CH,000H,0FFH
	DB	0FFH,000H,071H,08AH,082H,08AH,071H,000H,0FFH
	DB	0FFH,000H,0CFH,028H,00FH,028H,0CFH,000H,0FFH
	DB	0FFH,000H,09EH,020H,09CH,002H,0BCH,000H,0FFH
	DB	0FFH,001H,079H,081H,071H,009H,0F1H,001H,0FFH
G_OVER:
	DB	0FFH,080H,087H,084H,087H,084H,084H,080H,0FFH
	DB	0FFH,000H,0C4H,00AH,091H,01FH,011H,000H,0FFH
	DB	0FFH,000H,074H,024H,024H,024H,077H,000H,0FFH
	DB	0FFH,000H,022H,022H,022H,022H,09CH,000H,0FFH
	DB	0FFH,000H,0F3H,08AH,0F3H,092H,08BH,000H,0FFH
	DB	0FFH,001H,0E1H,001H,0E1H,001H,0E1H,001H,0FFH

TITLE_GRAPH:
    	DB  	000H,000H,007H,001H,001H,002H,002H,003H,002H,002H,004H
    	DB  	004H,01FH,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,0F0H,008H,008H,008H,010H,0E1H,041H,021H,021H
    	DB  	010H,03CH,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,03CH,042H,082H,002H,0FCH,000H,000H
    	DB  	084H,078H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,03CH,010H,010H,008H,008H,008H,005H
    	DB  	006H,006H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,0F0H,021H,042H,044H,087H,084H,004H
    	DB  	002H,001H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,0F0H,008H,008H,008H,0F0H,000H,000H
    	DB  	010H,0E0H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,073H,094H,018H,010H,010H,010H,020H
    	DB  	020H,0FEH,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,083H,08CH,088H,00CH,003H,000H,010H
    	DB  	018H,017H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,0A1H,060H,020H,000H,0C0H,020H,020H
    	DB  	040H,087H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	010H,010H,000H,000H,0F0H,020H,020H,020H,020H,020H,040H
    	DB  	040H,0F9H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,030H,010H,010H,017H,028H,030H,020H,020H,020H,060H
    	DB  	061H,0DEH,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,003H,000H,000H,000H,080H,040H,040H,040H,040H,081H
    	DB  	001H,01FH,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,0C0H,040H,040H,040H,080H,080H,081H,081H,081H,001H
    	DB  	000H,0F0H,000H,000H,004H,00DH,004H,004H,005H,004H,000H
    	DB  	000H,000H,000H,000H,03CH,042H,082H,002H,0FCH,000H,000H
    	DB  	084H,078H,000H,000H,0C6H,029H,0E7H,021H,029H,0C6H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,071H,011H,021H,021H,021H,021H,000H
    	DB  	000H,000H,003H,000H,000H,001H,001H,001H,001H,001H,002H
    	DB  	002H,01FH,000H,080H,01CH,022H,020H,020H,022H,01CH,080H
    	DB  	000H,000H,0F8H,084H,084H,004H,004H,008H,0F0H,000H,000H
    	DB  	000H,0E0H,000H,080H,041H,041H,042H,043H,044H,044H,080H
    	DB  	000H,000H,000H,000H,01EH,021H,001H,03FH,041H,082H,082H
    	DB  	086H,07BH,000H,000H,01EH,011H,09EH,091H,051H,05EH,000H
    	DB  	000H,000H,000H,000H,00DH,006H,004H,004H,008H,008H,008H
    	DB  	008H,09CH,000H,000H,039H,045H,041H,041H,045H,039H,000H
    	DB  	000H,000H,000H,000H,0E0H,010H,011H,012H,013H,022H,022H
    	DB  	021H,070H,000H,000H,0C0H,020H,021H,0C2H,000H,003H,000H
    	DB  	000H,000H,000H,000H,078H,084H,004H,004H,0F8H,000H,000H
    	DB  	008H,0F1H,000H,000H,000H,001H,09BH,025H,0A5H,019H,000H
    	DB  	000H,03CH,004H,004H,004H,008H,008H,008H,008H,008H,010H
    	DB  	010H,0FFH,000H,000H,080H,020H,0B5H,025H,022H,032H,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,059H,04DH,095H,08DH,000H
    	DB  	000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H
    	DB  	000H,000H,000H,000H,000H,000H,090H,028H,030H,018H,000H

;**************************************
;ワークエリア
;**************************************

DEC_X_SIZE		DB	5
X_SIZE			DB	6
GAMEMODE		DB	0
SHUFFLE			DB	5
FIELD			DB	120 DUP(?)
STEP_BACK		DB	255 DUP(?)
STEP_BACK_OFFSET	DB	0
CURSOR_X		DB	1 DUP(?)
CURSOR_Y		DB	1 DUP(?)
KEY_YOU_HIT		DB	1 DUP(?)
FONT			DW	0,0
K_REPEAT		DB	0
LASTKEY			DB	0
X_SIZE_OFFSET		DB	0
STEP			DW	0

CODE	ENDS
	END	START
